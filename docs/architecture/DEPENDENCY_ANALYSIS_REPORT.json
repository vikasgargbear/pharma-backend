{
  "summary": {
    "total_files": 61,
    "total_functions": 573,
    "total_classes": 165,
    "circular_dependencies": 0,
    "files_with_unused_imports": 56
  },
  "file_dependencies": {
    "api/base_schemas.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "decimal.Decimal",
        "decimal",
        "datetime",
        "pydantic.BaseModel",
        "typing",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "uuid"
      ],
      "exports": [
        "ComplianceDashboard",
        "SupplierCreate",
        "ProductBase",
        "ProductResponse",
        "SalesReturnCreate",
        "CustomerCreate",
        "Customer",
        "PurchaseCreate",
        "PaymentCreate",
        "CustomerBase",
        "PurchaseItemCreate",
        "PaymentAllocationCreate",
        "UserCreate",
        "OrderItemCreate",
        "TaxEntryCreate",
        "BatchBase",
        "Batch",
        "ProductUpdate",
        "Config",
        "ProductQuickCreate",
        "BatchCreate",
        "InventoryMovementCreate",
        "OrderCreate",
        "CustomerAdvancePaymentCreate",
        "ProductCreate"
      ],
      "functions": [],
      "classes": [
        "ComplianceDashboard",
        "SupplierCreate",
        "ProductBase",
        "ProductResponse",
        "SalesReturnCreate",
        "CustomerCreate",
        "Customer",
        "PurchaseCreate",
        "PaymentCreate",
        "CustomerBase",
        "PurchaseItemCreate",
        "PaymentAllocationCreate",
        "UserCreate",
        "OrderItemCreate",
        "TaxEntryCreate",
        "BatchBase",
        "Batch",
        "ProductUpdate",
        "Config",
        "ProductQuickCreate",
        "BatchCreate",
        "InventoryMovementCreate",
        "OrderCreate",
        "CustomerAdvancePaymentCreate",
        "ProductCreate"
      ],
      "database_tables": [],
      "unused_imports": [
        "uuid",
        "pydantic",
        "typing",
        "decimal"
      ]
    },
    "api/models.py": {
      "imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy",
        "sqlalchemy.Boolean",
        "datetime",
        "api.database",
        "sqlalchemy.Text",
        "api.database.Base",
        "sqlalchemy.DateTime",
        "sqlalchemy.dialects.postgresql.UUID",
        "datetime.datetime",
        "sqlalchemy.JSON",
        "sqlalchemy.Integer",
        "sqlalchemy.Numeric",
        "sqlalchemy.Column",
        "sqlalchemy.ARRAY"
      ],
      "exports": [
        "SalesReturn",
        "Customer",
        "Payment",
        "OrderItem",
        "Purchase",
        "Order",
        "Supplier",
        "User",
        "Batch",
        "InventoryMovement",
        "Product"
      ],
      "functions": [],
      "classes": [
        "SalesReturn",
        "Customer",
        "Payment",
        "OrderItem",
        "Purchase",
        "Order",
        "Supplier",
        "User",
        "Batch",
        "InventoryMovement",
        "Product"
      ],
      "database_tables": [],
      "unused_imports": [
        "sqlalchemy.dialects.postgresql"
      ]
    },
    "api/database.py": {
      "imports": [
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy",
        "api.core.config.settings",
        "core.config",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm",
        "api.core.config",
        "api.core.database_manager.get_database_manager",
        "api.core.database_manager",
        "core.config.settings",
        "models",
        "sqlalchemy.create_engine",
        "sqlalchemy.ext.declarative.declarative_base",
        "api.core.database_manager.get_db"
      ],
      "exports": [
        "get_db_session",
        "check_database_connection",
        "init_database"
      ],
      "functions": [
        "get_db_session",
        "check_database_connection",
        "init_database"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": []
    },
    "api/schemas.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "typing.Dict",
        "decimal",
        "datetime",
        "enum",
        "enum.Enum",
        "uuid.UUID",
        "typing",
        "pydantic.BaseModel",
        "typing.Any",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "pydantic.validator",
        "uuid"
      ],
      "exports": [
        "PaymentMode",
        "InvoiceStatus",
        "ProductBase",
        "OrderItemBase",
        "ProductResponse",
        "CustomerOutstandingResponse",
        "CustomerCreate",
        "StockLevel",
        "OrderStatus",
        "InvoiceResponse",
        "OrderResponse",
        "PaymentRecord",
        "CustomerType",
        "PaymentCreate",
        "PaymentResponse",
        "CustomerLedgerEntry",
        "BatchResponse",
        "CustomerBase",
        "ListResponse",
        "CustomerResponse",
        "OrderItemCreate",
        "GSTR3BSummary",
        "CustomerUpdate",
        "InvoiceItemBase",
        "SalesReport",
        "InvoiceSummary",
        "BatchBase",
        "InventoryMovement",
        "OrderDelivery",
        "OrderConfirmation",
        "Config",
        "OrganizationCreate",
        "OrganizationBase",
        "OrderItemResponse",
        "BatchCreate",
        "GSTR1Summary",
        "OrderBase",
        "GSTReportRequest",
        "GSTType",
        "MessageResponse",
        "OrderCreate",
        "CustomerLedgerResponse",
        "InvoiceCreate",
        "OrganizationResponse",
        "ErrorResponse",
        "ProductCreate",
        "OutstandingInvoice"
      ],
      "functions": [],
      "classes": [
        "PaymentMode",
        "InvoiceStatus",
        "ProductBase",
        "OrderItemBase",
        "ProductResponse",
        "CustomerOutstandingResponse",
        "CustomerCreate",
        "StockLevel",
        "OrderStatus",
        "InvoiceResponse",
        "OrderResponse",
        "PaymentRecord",
        "CustomerType",
        "PaymentCreate",
        "PaymentResponse",
        "CustomerLedgerEntry",
        "BatchResponse",
        "CustomerBase",
        "ListResponse",
        "CustomerResponse",
        "OrderItemCreate",
        "GSTR3BSummary",
        "CustomerUpdate",
        "InvoiceItemBase",
        "SalesReport",
        "InvoiceSummary",
        "BatchBase",
        "InventoryMovement",
        "OrderDelivery",
        "OrderConfirmation",
        "Config",
        "OrganizationCreate",
        "OrganizationBase",
        "OrderItemResponse",
        "BatchCreate",
        "GSTR1Summary",
        "OrderBase",
        "GSTReportRequest",
        "GSTType",
        "MessageResponse",
        "OrderCreate",
        "CustomerLedgerResponse",
        "InvoiceCreate",
        "OrganizationResponse",
        "ErrorResponse",
        "ProductCreate",
        "OutstandingInvoice"
      ],
      "database_tables": [],
      "unused_imports": [
        "pydantic",
        "enum",
        "decimal",
        "typing",
        "pydantic.validator",
        "uuid"
      ]
    },
    "api/business_logic.py": {
      "imports": [
        "typing.List",
        "schemas",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "datetime.date",
        "database.get_db",
        "typing",
        "datetime.datetime",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.orm",
        "models",
        "typing.Optional",
        "sqlalchemy.and_",
        "database",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "json",
        "uuid"
      ],
      "exports": [
        "BusinessLogicService",
        "process_sales_return",
        "process_complete_order",
        "is_customer_eligible",
        "StockAdjustmentManager",
        "process_stock_adjustment",
        "apply_eligible_discounts",
        "create_challan_from_order",
        "_update_customer_outstanding",
        "__init__",
        "DiscountManager",
        "create_payment_with_allocation",
        "process_payment_received",
        "update_order_payment_status",
        "ChallanManager",
        "get_batch_status",
        "process_expiry_management",
        "calculate_discount",
        "deliver_challan",
        "PaymentManager",
        "apply_advance_payment",
        "get_fifo_batches",
        "process_order_inventory",
        "_create_order_journal_entries",
        "InventoryManager",
        "dispatch_challan",
        "update_batch_status",
        "process_purchase_inventory"
      ],
      "functions": [
        "process_sales_return",
        "process_complete_order",
        "is_customer_eligible",
        "process_stock_adjustment",
        "apply_eligible_discounts",
        "create_challan_from_order",
        "_update_customer_outstanding",
        "__init__",
        "create_payment_with_allocation",
        "process_payment_received",
        "update_order_payment_status",
        "get_batch_status",
        "process_expiry_management",
        "calculate_discount",
        "deliver_challan",
        "apply_advance_payment",
        "get_fifo_batches",
        "process_order_inventory",
        "_create_order_journal_entries",
        "dispatch_challan",
        "update_batch_status",
        "process_purchase_inventory"
      ],
      "classes": [
        "ChallanManager",
        "BusinessLogicService",
        "DiscountManager",
        "InventoryManager",
        "StockAdjustmentManager",
        "PaymentManager"
      ],
      "database_tables": [],
      "unused_imports": [
        "typing",
        "typing.Optional",
        "typing.Any"
      ]
    },
    "api/initialize_db.py": {
      "imports": [
        "sys",
        "database",
        "models.Base",
        "os",
        "database.engine",
        "models"
      ],
      "exports": [
        "initialize_database"
      ],
      "functions": [
        "initialize_database"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": []
    },
    "api/main.py": {
      "imports": [
        "typing.List",
        "fastapi.exceptions",
        "sqlalchemy.exc",
        "fastapi.Depends",
        "fastapi.Form",
        "datetime",
        "api.core.config.settings",
        "api.routers.migrations",
        "fastapi.middleware.cors.CORSMiddleware",
        "api.routers.v1.customers_router",
        "api.routers.products",
        "contextlib",
        "api.routers.v1.orders_router",
        "api.database.check_database_connection",
        "uvicorn",
        "api.database.init_database",
        "sqlalchemy.exc.SQLAlchemyError",
        "api.routers.organizations",
        "logging",
        "api.database.engine",
        "collections.defaultdict",
        "time",
        "datetime.date",
        "fastapi.middleware.trustedhost.TrustedHostMiddleware",
        "collections",
        "api.routers.v1.billing_router",
        "api.database.SessionLocal",
        "api.core.audit.AuditLogger",
        "fastapi.Request",
        "typing",
        "fastapi.middleware.trustedhost",
        "datetime.datetime",
        "fastapi.exceptions.RequestValidationError",
        "fastapi.responses",
        "contextlib.asynccontextmanager",
        "fastapi.status",
        "api.routers",
        "api.database.get_db",
        "api.routers.migrations_v2",
        "api.database",
        "sqlalchemy",
        "api.core.audit",
        "fastapi.middleware.cors",
        "fastapi.HTTPException",
        "core.audit",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "api.core.config",
        "api.routers.simple_delivery",
        "api.routers.v1.inventory_router",
        "api.core.database_manager",
        "core.audit.AuditLogger",
        "fastapi.responses.JSONResponse",
        "api.routers.db_inspect",
        "sqlalchemy.and_",
        "api.core.database_manager.get_database_manager",
        "sqlalchemy.orm.Session",
        "json",
        "api.routers.v1",
        "sqlalchemy.text",
        "api.routers.customers_simple",
        "fastapi",
        "fastapi.FastAPI",
        "fastapi.security"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "typing.List",
        "api.database.engine",
        "fastapi.exceptions",
        "fastapi.middleware.cors",
        "fastapi.Depends",
        "fastapi.Form",
        "collections",
        "fastapi.HTTPException",
        "api.database.SessionLocal",
        "typing",
        "fastapi.middleware.trustedhost",
        "json",
        "contextlib",
        "api.database.check_database_connection",
        "api.database.init_database",
        "api.database.get_db",
        "sqlalchemy.and_"
      ]
    },
    "api/crud.py": {
      "imports": [
        "typing.List",
        "api.core.crud_base",
        "schemas",
        "datetime",
        "api.models.CustomerLoyalty",
        "core.crud_base",
        "datetime.timedelta",
        "api.business_logic.BusinessLogicService",
        "sqlalchemy.func",
        "api.business_logic.ChallanManager",
        "api.business_logic",
        "api.business_logic.PaymentManager",
        "datetime.date",
        "os",
        "typing",
        "api.models",
        "api.models.UPIPayment",
        "datetime.datetime",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.orm",
        "models",
        "api.business_logic.InventoryManager",
        "sqlalchemy.and_",
        "sys",
        "api.models.FileUpload",
        "api.models.LoyaltyRedemption",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.models.LoyaltyProgram",
        "json",
        "api.models.LoyaltyTransaction",
        "core.crud_base.create_crud",
        "uuid"
      ],
      "exports": [
        "get_expiring_licenses",
        "update_license_compliance_score",
        "update_adr_report",
        "get_product",
        "create_product",
        "update_cart",
        "delete_sales_return",
        "delete_product",
        "get_challan",
        "get_supplier",
        "get_payments",
        "create_price_history",
        "create_challan_from_order",
        "create_loyalty_program",
        "update_order",
        "process_payment_with_updates",
        "get_challans",
        "get_user",
        "get_state_compliance",
        "get_inventory_movements",
        "enroll_customer_in_loyalty",
        "get_sales_return",
        "update_cart_item",
        "create_customer_advance_payment",
        "get_customer_credit_notes",
        "create_batch_location",
        "update_sales_return",
        "update_customer_credit_note",
        "delete_purchase",
        "get_pending_document_verifications",
        "get_compliance_dashboard",
        "update_storage_location",
        "get_cart_by_user",
        "get_inventory_movement",
        "get_journal_entries",
        "get_challan_tracking",
        "create_loyalty_transaction",
        "create_payment_allocation",
        "update_customer_outstanding",
        "create_storage_location",
        "get_file_by_id",
        "update_challan",
        "update_regulatory_license",
        "create_order_item",
        "update_batch",
        "get_customer_advance_payments",
        "create_cart",
        "get_applied_discounts",
        "get_customer_advance_payment",
        "get_pending_challans",
        "get_cdsco_compliance",
        "get_purchase_return",
        "create_state_compliance",
        "update_inventory_movement",
        "delete_order_item",
        "get_cart_item",
        "create_customer_credit_note",
        "get_order_item",
        "get_storage_location",
        "create_customer",
        "get_batch",
        "create_inventory_transaction",
        "delete_payment",
        "delete_cart",
        "get_order",
        "get_regulatory_license",
        "get_challan_items",
        "get_customers",
        "create_payment",
        "get_medical_representative",
        "create_enhanced_regulatory_license",
        "get_price_history_record",
        "get_batch_locations",
        "create_sales_return",
        "get_medical_representatives",
        "create_medical_representative",
        "get_vendor_payment",
        "update_upi_payment_status",
        "delete_inventory_movement",
        "update_customer",
        "get_discount_scheme",
        "delete_discount_scheme",
        "get_files_by_entity",
        "verify_license_document",
        "delete_batch",
        "create_cdsco_compliance",
        "create_journal_entry",
        "get_active_loyalty_programs",
        "get_cart_items",
        "get_customer_credit_note",
        "get_customer_advance_balance",
        "get_upi_payment_by_merchant_id",
        "get_storage_locations",
        "get_enhanced_regulatory_licenses",
        "create_tax_entry",
        "update_purchase_return",
        "get_cart",
        "get_license_documents",
        "get_price_history",
        "get_fifo_batch_allocation",
        "get_order_items",
        "update_tax_entry",
        "get_suppliers",
        "update_journal_entry",
        "get_products",
        "apply_advance_payment_to_order",
        "create_order_with_business_logic",
        "create_purchase_item",
        "create_challan",
        "create_payment_with_allocation",
        "delete_regulatory_license",
        "generate_upi_qr_code",
        "update_purchase",
        "update_medical_representative",
        "get_customer_active_challans",
        "update_vendor_payment",
        "get_regulatory_licenses",
        "update_inspection_record",
        "create_user",
        "get_customer_upi_payments",
        "get_purchase",
        "get_vendor_payments",
        "delete_order",
        "get_batch_recommendations",
        "create_vendor_payment",
        "get_customer_loyalty",
        "delete_medical_representative",
        "update_payment",
        "delete_tax_entry",
        "create_discount_scheme",
        "create_license_document",
        "get_batch_inventory_transactions",
        "create_purchase",
        "award_loyalty_points",
        "get_purchase_return_item",
        "get_purchase_item",
        "update_purchase_item",
        "get_purchase_returns",
        "reconcile_upi_payment",
        "verify_file_upload",
        "get_tax_entry",
        "create_supplier",
        "get_customer",
        "delete_supplier",
        "get_out_of_stock_batches",
        "delete_purchase_item",
        "get_purchase_items",
        "get_low_stock_batches",
        "delete_customer",
        "get_users",
        "update_batch_location",
        "add_challan_tracking",
        "create_purchase_return_item",
        "create_inventory_movement",
        "get_customer_pending_deliveries",
        "process_stock_adjustment",
        "get_expiring_licenses_enhanced",
        "get_payment",
        "create_order",
        "upload_file",
        "create_customer_outstanding",
        "update_order_item",
        "get_inventory_transactions",
        "process_sales_return_inventory",
        "update_product",
        "redeem_loyalty_points",
        "create_cart_item",
        "update_user",
        "get_loyalty_program",
        "create_regulatory_license",
        "get_purchase_return_items",
        "get_sales_returns",
        "delete_cart_item",
        "create_purchase_return",
        "get_payment_allocation",
        "get_discount_schemes",
        "update_discount_scheme",
        "get_batch_inventory_status",
        "get_purchases",
        "delete_journal_entry",
        "get_customer_outstanding_record",
        "get_customer_outstanding",
        "get_batches",
        "get_payment_allocations",
        "update_customer_advance_payment",
        "get_journal_entry",
        "update_cdsco_monthly_report",
        "create_batch",
        "delete_vendor_payment",
        "get_batch_location",
        "dispatch_challan",
        "get_expiry_alerts",
        "get_tax_entries",
        "update_supplier",
        "delete_user",
        "get_orders"
      ],
      "functions": [
        "get_expiring_licenses",
        "update_license_compliance_score",
        "update_adr_report",
        "get_product",
        "create_product",
        "update_cart",
        "delete_sales_return",
        "delete_product",
        "get_challan",
        "get_supplier",
        "get_payments",
        "create_price_history",
        "create_challan_from_order",
        "create_loyalty_program",
        "update_order",
        "process_payment_with_updates",
        "get_challans",
        "get_user",
        "get_state_compliance",
        "get_inventory_movements",
        "enroll_customer_in_loyalty",
        "get_sales_return",
        "update_cart_item",
        "create_customer_advance_payment",
        "get_customer_credit_notes",
        "create_batch_location",
        "update_sales_return",
        "update_customer_credit_note",
        "delete_purchase",
        "get_pending_document_verifications",
        "get_compliance_dashboard",
        "update_storage_location",
        "get_cart_by_user",
        "get_inventory_movement",
        "get_journal_entries",
        "get_challan_tracking",
        "create_loyalty_transaction",
        "create_payment_allocation",
        "update_customer_outstanding",
        "create_storage_location",
        "get_file_by_id",
        "update_challan",
        "update_regulatory_license",
        "create_order_item",
        "update_batch",
        "get_customer_advance_payments",
        "create_cart",
        "get_applied_discounts",
        "get_customer_advance_payment",
        "get_pending_challans",
        "get_cdsco_compliance",
        "get_purchase_return",
        "create_state_compliance",
        "update_inventory_movement",
        "delete_order_item",
        "get_cart_item",
        "create_customer_credit_note",
        "get_order_item",
        "get_storage_location",
        "create_customer",
        "get_batch",
        "create_inventory_transaction",
        "delete_payment",
        "delete_cart",
        "get_order",
        "get_regulatory_license",
        "get_challan_items",
        "get_customers",
        "create_payment",
        "get_medical_representative",
        "create_enhanced_regulatory_license",
        "get_price_history_record",
        "get_batch_locations",
        "create_sales_return",
        "get_medical_representatives",
        "create_medical_representative",
        "get_vendor_payment",
        "update_upi_payment_status",
        "delete_inventory_movement",
        "update_customer",
        "get_discount_scheme",
        "delete_discount_scheme",
        "get_files_by_entity",
        "verify_license_document",
        "delete_batch",
        "create_cdsco_compliance",
        "create_journal_entry",
        "get_active_loyalty_programs",
        "get_cart_items",
        "get_customer_credit_note",
        "get_customer_advance_balance",
        "get_upi_payment_by_merchant_id",
        "get_storage_locations",
        "get_enhanced_regulatory_licenses",
        "create_tax_entry",
        "update_purchase_return",
        "get_cart",
        "get_license_documents",
        "get_price_history",
        "get_fifo_batch_allocation",
        "get_order_items",
        "update_tax_entry",
        "get_suppliers",
        "update_journal_entry",
        "get_products",
        "apply_advance_payment_to_order",
        "create_order_with_business_logic",
        "create_purchase_item",
        "create_challan",
        "create_payment_with_allocation",
        "delete_regulatory_license",
        "generate_upi_qr_code",
        "update_purchase",
        "update_medical_representative",
        "get_customer_active_challans",
        "update_vendor_payment",
        "get_regulatory_licenses",
        "update_inspection_record",
        "create_user",
        "get_customer_upi_payments",
        "get_purchase",
        "get_vendor_payments",
        "delete_order",
        "get_batch_recommendations",
        "create_vendor_payment",
        "get_customer_loyalty",
        "delete_medical_representative",
        "update_payment",
        "delete_tax_entry",
        "create_discount_scheme",
        "create_license_document",
        "get_batch_inventory_transactions",
        "create_purchase",
        "award_loyalty_points",
        "get_purchase_return_item",
        "get_purchase_item",
        "update_purchase_item",
        "get_purchase_returns",
        "reconcile_upi_payment",
        "verify_file_upload",
        "get_tax_entry",
        "create_supplier",
        "get_customer",
        "delete_supplier",
        "get_out_of_stock_batches",
        "delete_purchase_item",
        "get_purchase_items",
        "get_low_stock_batches",
        "delete_customer",
        "get_users",
        "update_batch_location",
        "add_challan_tracking",
        "create_purchase_return_item",
        "create_inventory_movement",
        "get_customer_pending_deliveries",
        "process_stock_adjustment",
        "get_expiring_licenses_enhanced",
        "get_payment",
        "create_order",
        "upload_file",
        "create_customer_outstanding",
        "update_order_item",
        "get_inventory_transactions",
        "process_sales_return_inventory",
        "update_product",
        "redeem_loyalty_points",
        "create_cart_item",
        "update_user",
        "get_loyalty_program",
        "create_regulatory_license",
        "get_purchase_return_items",
        "get_sales_returns",
        "delete_cart_item",
        "create_purchase_return",
        "get_payment_allocation",
        "get_discount_schemes",
        "update_discount_scheme",
        "get_batch_inventory_status",
        "get_purchases",
        "delete_journal_entry",
        "get_customer_outstanding_record",
        "get_customer_outstanding",
        "get_batches",
        "get_payment_allocations",
        "update_customer_advance_payment",
        "get_journal_entry",
        "update_cdsco_monthly_report",
        "create_batch",
        "delete_vendor_payment",
        "get_batch_location",
        "dispatch_challan",
        "get_expiry_alerts",
        "get_tax_entries",
        "update_supplier",
        "delete_user",
        "get_orders"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "typing"
      ]
    },
    "api/dependencies.py": {
      "imports": [
        "api.core.config.settings",
        "fastapi.Depends",
        "datetime",
        "typing",
        "datetime.datetime",
        "fastapi.status",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "fastapi.security.HTTPAuthorizationCredentials",
        "api.core.config",
        "jose.JWTError",
        "typing.Optional",
        "jose",
        "jose.jwt",
        "sqlalchemy.orm.Session",
        "fastapi",
        "fastapi.security"
      ],
      "exports": [
        "check_permission"
      ],
      "functions": [
        "check_permission"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.config",
        "sqlalchemy.orm",
        "typing",
        "typing.Optional",
        "jose",
        "api.database"
      ]
    },
    "api/routers/stock_adjustments.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "api.business_logic",
        "datetime.date",
        "api.dependencies",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.business_logic.StockAdjustmentManager",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi.Query",
        "fastapi"
      ],
      "exports": [
        "get_batch_adjustments",
        "get_adjustments_by_reason",
        "read_stock_adjustment",
        "read_stock_adjustments",
        "create_stock_adjustment",
        "get_stock_adjustment_analytics",
        "adjust_batch_stock"
      ],
      "functions": [
        "get_batch_adjustments",
        "get_adjustments_by_reason",
        "read_stock_adjustment",
        "read_stock_adjustments",
        "create_stock_adjustment",
        "get_stock_adjustment_analytics",
        "adjust_batch_stock"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "api.dependencies",
        "typing",
        "api.core.security",
        "fastapi",
        "api.business_logic"
      ]
    },
    "api/routers/simple_delivery.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "fastapi.Depends",
        "datetime",
        "pydantic.BaseModel",
        "datetime.date",
        "api.dependencies",
        "typing",
        "api.models",
        "datetime.datetime",
        "api.models.User",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "typing.Optional",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi"
      ],
      "exports": [
        "PendingDeliveryResponse",
        "DeliveryConfirmRequest",
        "DeliveryStatusResponse"
      ],
      "functions": [],
      "classes": [
        "PendingDeliveryResponse",
        "DeliveryConfirmRequest",
        "DeliveryStatusResponse"
      ],
      "database_tables": [],
      "unused_imports": [
        "pydantic",
        "sqlalchemy.orm",
        "api.dependencies",
        "api.models",
        "typing",
        "fastapi"
      ]
    },
    "api/routers/sales_returns.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "api.business_logic",
        "datetime.date",
        "api.dependencies",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.business_logic.InventoryManager",
        "fastapi.APIRouter",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi"
      ],
      "exports": [
        "update_sales_return",
        "process_sales_return",
        "get_sales_return_analytics",
        "get_order_sales_returns",
        "delete_sales_return",
        "get_customer_sales_returns",
        "read_sales_returns",
        "create_sales_return",
        "read_sales_return"
      ],
      "functions": [
        "update_sales_return",
        "process_sales_return",
        "get_sales_return_analytics",
        "get_order_sales_returns",
        "delete_sales_return",
        "get_customer_sales_returns",
        "read_sales_returns",
        "create_sales_return",
        "read_sales_return"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "api.dependencies",
        "typing",
        "api.core.security",
        "fastapi",
        "api.business_logic"
      ]
    },
    "api/routers/payments.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "api.business_logic",
        "api.business_logic.PaymentManager",
        "api.dependencies",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi.Query",
        "fastapi"
      ],
      "exports": [
        "read_vendor_payments",
        "update_vendor_payment",
        "delete_payment",
        "read_payment_allocations",
        "create_advance_payment",
        "update_advance_payment",
        "read_vendor_payment",
        "create_vendor_payment",
        "delete_vendor_payment",
        "read_payments",
        "create_payment",
        "update_payment",
        "create_payment_with_allocation",
        "apply_advance_to_order",
        "read_payment"
      ],
      "functions": [
        "read_vendor_payments",
        "update_vendor_payment",
        "delete_payment",
        "read_payment_allocations",
        "create_advance_payment",
        "update_advance_payment",
        "read_vendor_payment",
        "create_vendor_payment",
        "delete_vendor_payment",
        "read_payments",
        "create_payment",
        "update_payment",
        "create_payment_with_allocation",
        "apply_advance_to_order",
        "read_payment"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "api.dependencies",
        "typing",
        "fastapi.Query",
        "datetime.timedelta",
        "api.core.security",
        "typing.Optional",
        "fastapi",
        "api.business_logic"
      ]
    },
    "api/routers/customers_simple.py": {
      "imports": [
        "logging",
        "typing.List",
        "sqlalchemy",
        "decimal.Decimal",
        "fastapi.Depends",
        "decimal",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "sqlalchemy.text",
        "fastapi.APIRouter",
        "typing.Optional",
        "fastapi",
        "api.database.get_db",
        "api.database"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "customers",
        "orders",
        "order_items",
        "information_schema"
      ],
      "unused_imports": [
        "fastapi",
        "decimal.Decimal",
        "typing",
        "decimal"
      ]
    },
    "api/routers/billing.py": {
      "imports": [
        "typing.List",
        "api.schemas.PaymentCreate",
        "fastapi.Depends",
        "datetime",
        "api.schemas.InvoiceSummary",
        "api.schemas.PaymentResponse",
        "logging",
        "datetime.date",
        "api.schemas",
        "typing",
        "api.schemas.InvoiceCreate",
        "uuid.UUID",
        "api.schemas.InvoiceResponse",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.services.billing_service.BillingService",
        "api.schemas.GSTR1Summary",
        "fastapi.APIRouter",
        "typing.Optional",
        "fastapi",
        "sqlalchemy.orm.Session",
        "fastapi.Query",
        "sqlalchemy.text",
        "uuid",
        "api.services.billing_service"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "organizations",
        "invoice_items",
        "invoices"
      ],
      "unused_imports": [
        "datetime",
        "api.schemas",
        "uuid",
        "typing",
        "fastapi",
        "api.services.billing_service",
        "api.database"
      ]
    },
    "api/routers/compliance.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.core.security",
        "datetime.date",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "json",
        "fastapi.Query",
        "sqlalchemy.text",
        "fastapi"
      ],
      "exports": [
        "get_expiring_licenses",
        "get_licenses",
        "resolve_compliance_check",
        "get_audit_trail_analytics",
        "export_audit_report",
        "update_license",
        "get_compliance_checks",
        "get_regulatory_reports",
        "create_audit_log",
        "get_drug_licensing_report",
        "get_compliance_check",
        "get_compliance_analytics",
        "create_license",
        "get_audit_logs",
        "get_license",
        "create_compliance_check",
        "get_audit_log",
        "create_regulatory_report",
        "generate_monthly_compliance_report",
        "get_regulatory_report",
        "submit_regulatory_report"
      ],
      "functions": [
        "get_expiring_licenses",
        "get_licenses",
        "resolve_compliance_check",
        "get_audit_trail_analytics",
        "export_audit_report",
        "update_license",
        "get_compliance_checks",
        "get_regulatory_reports",
        "create_audit_log",
        "get_drug_licensing_report",
        "get_compliance_check",
        "get_compliance_analytics",
        "create_license",
        "get_audit_logs",
        "get_license",
        "create_compliance_check",
        "get_audit_log",
        "create_regulatory_report",
        "generate_monthly_compliance_report",
        "get_regulatory_report",
        "submit_regulatory_report"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "typing.Dict",
        "api.core.crud_base",
        "typing",
        "typing.Any",
        "json",
        "sqlalchemy.text",
        "sqlalchemy.or_",
        "api.core.security",
        "sqlalchemy.func",
        "fastapi",
        "sqlalchemy.and_"
      ]
    },
    "api/routers/tax_entries.py": {
      "imports": [
        "typing.List",
        "datetime.date",
        "fastapi.Depends",
        "api.core.crud_base",
        "fastapi.HTTPException",
        "datetime",
        "sqlalchemy.orm",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "typing",
        "datetime.datetime",
        "fastapi.APIRouter",
        "api.core.security.handle_database_error",
        "api.core.security",
        "datetime.timedelta",
        "fastapi",
        "api.database.get_db",
        "api.database"
      ],
      "exports": [
        "calculate_tax",
        "update_tax_entry",
        "get_gst_summary",
        "create_tax_entry",
        "get_pending_tax_returns",
        "read_tax_entries",
        "get_tax_report_summary",
        "get_order_tax_summary",
        "delete_tax_entry",
        "read_tax_entry"
      ],
      "functions": [
        "calculate_tax",
        "update_tax_entry",
        "get_gst_summary",
        "create_tax_entry",
        "get_pending_tax_returns",
        "read_tax_entries",
        "get_tax_report_summary",
        "get_order_tax_summary",
        "delete_tax_entry",
        "read_tax_entry"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "fastapi",
        "api.core.crud_base",
        "api.core.security",
        "typing"
      ]
    },
    "api/routers/users.py": {
      "imports": [
        "typing.List",
        "api.core.config.settings",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "hashlib",
        "passlib.context.CryptContext",
        "datetime.timedelta",
        "api.core.security",
        "passlib.context",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "fastapi.status",
        "api.database.get_db",
        "api.database",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "fastapi.security.HTTPAuthorizationCredentials",
        "api.core.config",
        "fastapi.APIRouter",
        "typing.Optional",
        "jose",
        "jose.jwt",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "fastapi",
        "fastapi.security"
      ],
      "exports": [
        "get_users",
        "get_password_hash",
        "update_user",
        "verify_password",
        "create_access_token",
        "get_current_user_profile",
        "get_roles",
        "logout_user",
        "register_user",
        "get_user",
        "create_role",
        "get_user_analytics",
        "update_current_user",
        "get_active_sessions",
        "get_current_user",
        "login_user",
        "change_password",
        "delete_user"
      ],
      "functions": [
        "get_users",
        "get_password_hash",
        "update_user",
        "verify_password",
        "create_access_token",
        "get_current_user_profile",
        "get_roles",
        "logout_user",
        "register_user",
        "get_user",
        "create_role",
        "get_user_analytics",
        "update_current_user",
        "get_active_sessions",
        "get_current_user",
        "login_user",
        "change_password",
        "delete_user"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "api.core.config",
        "sqlalchemy.orm",
        "hashlib",
        "typing",
        "jose"
      ]
    },
    "api/routers/migrations_v2.py": {
      "imports": [
        "api.migrations.add_order_columns",
        "api.migrations.add_order_columns.create_sample_order_data",
        "fastapi.Depends",
        "api.migrations.add_inventory_tables.get_existing_tables",
        "api.migrations.create_billing_tables",
        "api.migrations.add_customer_columns.create_sample_customer_data",
        "api.migrations.add_inventory_tables.add_inventory_enterprise_tables",
        "logging",
        "api.migrations.add_customer_columns",
        "api.migrations.fix_order_columns",
        "typing",
        "api.migrations.add_customer_columns.get_existing_columns",
        "api.database.get_db",
        "api.migrations.create_billing_tables.create_billing_tables",
        "api.database",
        "sqlalchemy",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.migrations.add_customer_columns.add_customer_enterprise_columns",
        "fastapi.APIRouter",
        "api.migrations.create_billing_tables.drop_billing_tables",
        "api.migrations.fix_order_columns.fix_missing_columns",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "sqlalchemy.text",
        "api.migrations.add_order_columns.add_order_enterprise_columns",
        "fastapi",
        "api.migrations.add_inventory_tables"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "batches",
        "invoice_payments",
        "inventory_movements",
        "invoices"
      ],
      "unused_imports": [
        "api.migrations.add_order_columns",
        "typing.Dict",
        "api.migrations.add_customer_columns",
        "sqlalchemy.orm",
        "typing",
        "typing.Any",
        "fastapi",
        "api.migrations.add_inventory_tables",
        "api.migrations.create_billing_tables.drop_billing_tables"
      ]
    },
    "api/routers/purchases.py": {
      "imports": [
        "typing.List",
        "bill_parser.pharma_patterns.get_pattern_count",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "uuid",
        "datetime.timedelta",
        "api.core.security",
        "bill_parser.parsers.generic",
        "tempfile",
        "logging",
        "os",
        "api.dependencies",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "fastapi.responses",
        "bill_parser.parsers.generic.GenericParser",
        "api.database.get_db",
        "fastapi.responses.FileResponse",
        "api.database",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "bill_parser.models.Invoice",
        "typing.Optional",
        "bill_parser.pharma_patterns",
        "sys",
        "fastapi.UploadFile",
        "bill_parser.models",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "typing.Any",
        "fastapi.File",
        "fastapi"
      ],
      "exports": [
        "read_purchase_return_items",
        "read_purchase_return",
        "update_purchase_return",
        "create_purchase_return_item",
        "get_parsing_confidence_metrics",
        "read_purchase_item",
        "read_purchases",
        "get_parser_health",
        "create_purchase_item",
        "read_purchase_items",
        "update_purchase",
        "read_purchase_return_item",
        "create_purchase_return",
        "delete_purchase",
        "get_supplier_analytics",
        "read_purchase",
        "read_suppliers",
        "create_purchase",
        "update_purchase_item",
        "read_supplier",
        "create_supplier",
        "delete_supplier",
        "delete_purchase_item",
        "get_purchase_analytics",
        "update_supplier",
        "read_purchase_returns"
      ],
      "functions": [
        "read_purchase_return_items",
        "read_purchase_return",
        "update_purchase_return",
        "create_purchase_return_item",
        "get_parsing_confidence_metrics",
        "read_purchase_item",
        "read_purchases",
        "get_parser_health",
        "create_purchase_item",
        "read_purchase_items",
        "update_purchase",
        "read_purchase_return_item",
        "create_purchase_return",
        "delete_purchase",
        "get_supplier_analytics",
        "read_purchase",
        "read_suppliers",
        "create_purchase",
        "update_purchase_item",
        "read_supplier",
        "create_supplier",
        "delete_supplier",
        "delete_purchase_item",
        "get_purchase_analytics",
        "update_supplier",
        "read_purchase_returns"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "bill_parser.pharma_patterns",
        "api.core.crud_base",
        "api.dependencies",
        "typing",
        "fastapi.responses",
        "api.core.security"
      ]
    },
    "api/routers/challans.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.core.security",
        "api.business_logic.ChallanManager",
        "api.business_logic",
        "datetime.date",
        "api.dependencies",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi.Query",
        "fastapi"
      ],
      "exports": [
        "delete_challan_item",
        "get_customer_pending_challans",
        "get_delivery_performance",
        "delete_challan",
        "read_challan",
        "create_challan_from_order",
        "update_challan_item",
        "create_challan",
        "deliver_challan",
        "get_challan_print_data",
        "get_customer_challans",
        "read_challan_items",
        "cancel_challan",
        "read_challans",
        "get_daily_challan_report",
        "dispatch_challan",
        "create_challan_item",
        "update_challan",
        "get_challan_analytics"
      ],
      "functions": [
        "delete_challan_item",
        "get_customer_pending_challans",
        "get_delivery_performance",
        "delete_challan",
        "read_challan",
        "create_challan_from_order",
        "update_challan_item",
        "create_challan",
        "deliver_challan",
        "get_challan_print_data",
        "get_customer_challans",
        "read_challan_items",
        "cancel_challan",
        "read_challans",
        "get_daily_challan_report",
        "dispatch_challan",
        "create_challan_item",
        "update_challan",
        "get_challan_analytics"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "api.dependencies",
        "typing",
        "sqlalchemy.or_",
        "api.core.security",
        "fastapi",
        "api.business_logic",
        "sqlalchemy.and_"
      ]
    },
    "api/routers/db_inspect.py": {
      "imports": [
        "sqlalchemy",
        "typing.List",
        "fastapi.Depends",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "typing.Any",
        "sqlalchemy.text",
        "fastapi.APIRouter",
        "fastapi",
        "api.database.get_db",
        "api.database"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "information_schema"
      ],
      "unused_imports": [
        "typing.List",
        "typing.Dict",
        "typing",
        "typing.Any",
        "fastapi"
      ]
    },
    "api/routers/products.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "api.core.security",
        "typing",
        "api.models",
        "api.base_schemas.ProductResponse",
        "api.base_schemas.ProductCreate",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.models.Product",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.base_schemas",
        "api.core.security.ResourceNotFoundError",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "sqlalchemy.text",
        "fastapi"
      ],
      "exports": [
        "get_product",
        "create_product",
        "update_product",
        "get_products",
        "delete_product"
      ],
      "functions": [
        "get_product",
        "create_product",
        "update_product",
        "get_products",
        "delete_product"
      ],
      "classes": [],
      "database_tables": [
        "products"
      ],
      "unused_imports": [
        "api.base_schemas",
        "typing.List",
        "api.core.crud_base",
        "sqlalchemy.orm",
        "api.models",
        "typing",
        "api.core.security",
        "fastapi",
        "api.database"
      ]
    },
    "api/routers/orders.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "uuid",
        "api.core.security",
        "os",
        "api.dependencies",
        "typing",
        "api.core.security.handle_database_error",
        "fastapi.responses",
        "api.database.get_db",
        "api.database",
        "fastapi.responses.FileResponse",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "fastapi.UploadFile",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "api.dependencies.get_current_user",
        "fastapi.File",
        "fastapi"
      ],
      "exports": [
        "create_complete_order",
        "update_order_item",
        "update_order",
        "get_order_payment_status",
        "delete_order",
        "read_orders",
        "read_order_items",
        "read_order",
        "delete_order_item",
        "read_order_item",
        "create_order_item",
        "create_order"
      ],
      "functions": [
        "create_complete_order",
        "update_order_item",
        "update_order",
        "get_order_payment_status",
        "delete_order",
        "read_orders",
        "read_order_items",
        "read_order",
        "delete_order_item",
        "read_order_item",
        "create_order_item",
        "create_order"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "api.dependencies",
        "typing",
        "fastapi.responses",
        "api.core.security"
      ]
    },
    "api/routers/organizations.py": {
      "imports": [
        "sqlalchemy",
        "fastapi.Depends",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "uuid",
        "typing.Any",
        "sqlalchemy.text",
        "fastapi.APIRouter",
        "fastapi",
        "api.database.get_db",
        "api.database"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "organizations",
        "information_schema"
      ],
      "unused_imports": [
        "typing.Dict",
        "typing",
        "typing.Any",
        "fastapi",
        "api.database"
      ]
    },
    "api/routers/migrations.py": {
      "imports": [
        "sqlalchemy",
        "api.core.config.settings",
        "fastapi.HTTPException",
        "api.core.config",
        "sqlalchemy.text",
        "fastapi.APIRouter",
        "sqlalchemy.create_engine",
        "fastapi"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.config",
        "sqlalchemy",
        "fastapi",
        "fastapi.HTTPException"
      ]
    },
    "api/routers/analytics.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.core.security",
        "datetime.date",
        "collections.defaultdict",
        "collections",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "json",
        "fastapi.Query",
        "sqlalchemy.text",
        "fastapi"
      ],
      "exports": [
        "export_comprehensive_report",
        "get_cash_flow_analysis",
        "get_operational_efficiency",
        "get_sales_trend",
        "get_inventory_status",
        "get_sales_summary",
        "get_inventory_turnover",
        "get_dashboard_overview",
        "get_top_selling_products",
        "get_financial_summary",
        "get_demand_forecast",
        "get_customer_segmentation"
      ],
      "functions": [
        "export_comprehensive_report",
        "get_cash_flow_analysis",
        "get_operational_efficiency",
        "get_sales_trend",
        "get_inventory_status",
        "get_sales_summary",
        "get_inventory_turnover",
        "get_dashboard_overview",
        "get_top_selling_products",
        "get_financial_summary",
        "get_demand_forecast",
        "get_customer_segmentation"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "typing.List",
        "api.core.crud_base",
        "collections",
        "typing.Dict",
        "fastapi.HTTPException",
        "api.core.crud_base.create_crud",
        "typing",
        "typing.Any",
        "json",
        "sqlalchemy.text",
        "sqlalchemy.or_",
        "api.core.security",
        "fastapi"
      ]
    },
    "api/routers/file_uploads.py": {
      "imports": [
        "typing.List",
        "api.core.config.settings",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "api.core.config.get_supabase_client",
        "os",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "fastapi.responses",
        "api.database.get_db",
        "api.database",
        "fastapi.responses.FileResponse",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.core.config",
        "fastapi.APIRouter",
        "typing.Optional",
        "fastapi",
        "pathlib.Path",
        "fastapi.UploadFile",
        "pathlib",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "fastapi.Query",
        "fastapi.File",
        "mimetypes",
        "uuid"
      ],
      "exports": [
        "generate_unique_filename",
        "get_license_documents",
        "get_recent_uploads",
        "get_files",
        "get_customer_documents",
        "save_file_supabase",
        "get_file_analytics",
        "delete_file",
        "get_file",
        "get_product_images",
        "get_compliance_certificates",
        "download_file",
        "save_file_locally",
        "validate_file",
        "get_entity_files"
      ],
      "functions": [
        "generate_unique_filename",
        "get_license_documents",
        "get_recent_uploads",
        "get_files",
        "get_customer_documents",
        "save_file_supabase",
        "get_file_analytics",
        "delete_file",
        "get_file",
        "get_product_images",
        "get_compliance_certificates",
        "download_file",
        "save_file_locally",
        "validate_file",
        "get_entity_files"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "pathlib",
        "typing",
        "fastapi.responses",
        "api.core.security"
      ]
    },
    "api/routers/batches.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "datetime.date",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "fastapi"
      ],
      "exports": [
        "get_expired_batches",
        "get_batches_expiring_by_month",
        "mark_batch_expired",
        "read_batch",
        "get_batch_current_stock",
        "create_batch",
        "search_batches_by_number",
        "get_supplier_batches",
        "get_expiring_batches",
        "get_batch_analytics",
        "get_wastage_analysis",
        "get_expiry_timeline",
        "delete_batch",
        "read_batches",
        "get_product_batches",
        "update_batch"
      ],
      "functions": [
        "get_expired_batches",
        "get_batches_expiring_by_month",
        "mark_batch_expired",
        "read_batch",
        "get_batch_current_stock",
        "create_batch",
        "search_batches_by_number",
        "get_supplier_batches",
        "get_expiring_batches",
        "get_batch_analytics",
        "get_wastage_analysis",
        "get_expiry_timeline",
        "delete_batch",
        "read_batches",
        "get_product_batches",
        "update_batch"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "typing",
        "sqlalchemy.or_",
        "api.core.security",
        "fastapi"
      ]
    },
    "api/routers/customers.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "typing",
        "fastapi.APIRouter",
        "api.core.security.handle_database_error",
        "api.core.security",
        "fastapi",
        "api.database.get_db",
        "api.database"
      ],
      "exports": [
        "create_customer",
        "create_customer_outstanding",
        "get_customer_advance_balance",
        "read_customer_outstanding",
        "get_customer_advance_payments",
        "update_customer_credit_note",
        "read_customer_outstanding_record",
        "read_customers",
        "get_customer_active_challans",
        "get_customer_payment_summary",
        "update_customer_outstanding",
        "read_customer_credit_note",
        "read_customer_credit_notes",
        "update_customer",
        "read_customer",
        "create_customer_credit_note",
        "delete_customer"
      ],
      "functions": [
        "create_customer",
        "create_customer_outstanding",
        "get_customer_advance_balance",
        "read_customer_outstanding",
        "get_customer_advance_payments",
        "update_customer_credit_note",
        "read_customer_outstanding_record",
        "read_customers",
        "get_customer_active_challans",
        "get_customer_payment_summary",
        "update_customer_outstanding",
        "read_customer_credit_note",
        "read_customer_credit_notes",
        "update_customer",
        "read_customer",
        "create_customer_credit_note",
        "delete_customer"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "typing",
        "api.core.security",
        "fastapi"
      ]
    },
    "api/routers/loyalty.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.core.security",
        "datetime.date",
        "typing",
        "datetime.datetime",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "fastapi.Query",
        "fastapi"
      ],
      "exports": [
        "upgrade_customer_tier",
        "get_reward",
        "get_loyalty_analytics",
        "get_rewards",
        "earn_points",
        "get_loyalty_accounts",
        "redeem_reward",
        "get_customer_redemptions",
        "get_tier_benefits",
        "create_loyalty_account",
        "get_points_transactions",
        "get_available_rewards",
        "calculate_tier",
        "get_customer_loyalty_account",
        "get_tier_performance_analytics",
        "update_loyalty_account",
        "redeem_points",
        "create_reward",
        "get_customer_engagement_analytics",
        "get_loyalty_account"
      ],
      "functions": [
        "upgrade_customer_tier",
        "get_reward",
        "get_loyalty_analytics",
        "get_rewards",
        "earn_points",
        "get_loyalty_accounts",
        "redeem_reward",
        "get_customer_redemptions",
        "get_tier_benefits",
        "create_loyalty_account",
        "get_points_transactions",
        "get_available_rewards",
        "calculate_tier",
        "get_customer_loyalty_account",
        "get_tier_performance_analytics",
        "update_loyalty_account",
        "redeem_points",
        "create_reward",
        "get_customer_engagement_analytics",
        "get_loyalty_account"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "typing",
        "sqlalchemy.or_",
        "api.core.security",
        "fastapi",
        "sqlalchemy.and_"
      ]
    },
    "api/routers/inventory.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.core.crud_base",
        "datetime",
        "datetime.timedelta",
        "api.core.security",
        "datetime.date",
        "typing",
        "api.core.security.handle_database_error",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "sqlalchemy.and_",
        "api.core.crud_base.create_crud",
        "sqlalchemy.orm.Session",
        "fastapi"
      ],
      "exports": [
        "read_storage_locations",
        "update_batch_location",
        "create_inventory_movement",
        "update_inventory_movement",
        "read_batch_location",
        "create_inventory_transaction",
        "read_inventory_movement",
        "get_fifo_batch_allocation",
        "read_inventory_transactions",
        "read_storage_location",
        "create_batch_location",
        "get_inventory_alerts",
        "delete_inventory_movement",
        "update_storage_location",
        "get_batch_inventory_status",
        "read_batch_locations",
        "get_batch_inventory_transactions",
        "read_inventory_movements",
        "get_out_of_stock_batches",
        "create_storage_location",
        "get_low_stock_batches"
      ],
      "functions": [
        "read_storage_locations",
        "update_batch_location",
        "create_inventory_movement",
        "update_inventory_movement",
        "read_batch_location",
        "create_inventory_transaction",
        "read_inventory_movement",
        "get_fifo_batch_allocation",
        "read_inventory_transactions",
        "read_storage_location",
        "create_batch_location",
        "get_inventory_alerts",
        "delete_inventory_movement",
        "update_storage_location",
        "get_batch_inventory_status",
        "read_batch_locations",
        "get_batch_inventory_transactions",
        "read_inventory_movements",
        "get_out_of_stock_batches",
        "create_storage_location",
        "get_low_stock_batches"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.core.crud_base",
        "sqlalchemy.orm",
        "typing",
        "api.core.security",
        "fastapi"
      ]
    },
    "api/routers/v1/billing.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "datetime",
        "api.services.billing_service",
        "api.schemas_v2.billing.InvoiceCreate",
        "logging",
        "datetime.date",
        "api.schemas_v2.billing.PaymentResponse",
        "typing",
        "api.schemas_v2.billing.GSTReportRequest",
        "uuid.UUID",
        "api.schemas_v2.billing.PaymentCreate",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.schemas_v2.billing",
        "api.services.billing_service.BillingService",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.schemas_v2.billing.InvoiceSummary",
        "fastapi",
        "sqlalchemy.orm.Session",
        "fastapi.Query",
        "sqlalchemy.text",
        "uuid",
        "api.schemas_v2.billing.InvoiceResponse",
        "api.schemas_v2.billing.GSTR1Summary"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "organizations",
        "invoice_items",
        "invoices"
      ],
      "unused_imports": [
        "datetime",
        "uuid",
        "typing",
        "api.schemas_v2.billing.GSTReportRequest",
        "fastapi",
        "api.services.billing_service",
        "api.database"
      ]
    },
    "api/routers/v1/__init__.py": {
      "imports": [
        "api.routers.v1.billing.router",
        "api.routers.v1.orders",
        "api.routers.v1.inventory",
        "api.routers.v1.billing",
        "api.routers.v1.customers",
        "api.routers.v1.orders.router",
        "api.routers.v1.inventory.router",
        "api.routers.v1.customers.router"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": []
    },
    "api/routers/v1/orders.py": {
      "imports": [
        "typing.List",
        "api.schemas_v2.order.InvoiceResponse",
        "fastapi.Depends",
        "decimal",
        "datetime",
        "api.schemas_v2.order.InvoiceRequest",
        "api.services.order_service",
        "api.services.customer_service.CustomerService",
        "logging",
        "api.schemas_v2.order.OrderListResponse",
        "datetime.date",
        "api.schemas_v2.order",
        "typing",
        "api.schemas_v2.order.OrderResponse",
        "datetime.datetime",
        "uuid.UUID",
        "api.schemas_v2.order.OrderUpdate",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "api.services.order_service.OrderService",
        "decimal.Decimal",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.APIRouter",
        "api.schemas_v2.order.DeliveryUpdate",
        "typing.Optional",
        "api.services.customer_service",
        "api.schemas_v2.order.ReturnRequest",
        "fastapi",
        "sqlalchemy.orm.Session",
        "api.schemas_v2.order.OrderCreate",
        "fastapi.Query",
        "sqlalchemy.text",
        "uuid"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "customers",
        "orders",
        "order_items",
        "invoices",
        "batches",
        "products",
        "inventory_movements"
      ],
      "unused_imports": [
        "fastapi",
        "decimal",
        "sqlalchemy.orm",
        "uuid",
        "typing",
        "api.services.order_service",
        "uuid.UUID",
        "api.schemas_v2.order.OrderUpdate",
        "api.services.customer_service",
        "api.database"
      ]
    },
    "api/routers/v1/customers.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "datetime",
        "api.schemas_v2.customer.CustomerResponse",
        "api.schemas_v2.customer.CustomerLedgerResponse",
        "api.schemas_v2.customer.PaymentRecord",
        "api.schemas_v2.customer.PaymentResponse",
        "api.services.customer_service.CustomerService",
        "api.schemas_v2.customer.CustomerCreate",
        "logging",
        "datetime.date",
        "typing",
        "uuid.UUID",
        "api.schemas_v2.customer.CustomerOutstandingResponse",
        "api.database.get_db",
        "api.database",
        "sqlalchemy",
        "api.schemas_v2.customer",
        "api.schemas_v2.customer.CustomerListResponse",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.schemas_v2.customer.CustomerUpdate",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.services.customer_service",
        "fastapi",
        "sqlalchemy.orm.Session",
        "fastapi.Query",
        "sqlalchemy.text",
        "uuid"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [
        "customers"
      ],
      "unused_imports": [
        "fastapi",
        "datetime",
        "sqlalchemy.orm",
        "uuid",
        "typing",
        "uuid.UUID",
        "api.services.customer_service",
        "api.database"
      ]
    },
    "api/routers/v1/inventory.py": {
      "imports": [
        "typing.List",
        "fastapi.Depends",
        "api.schemas_v2.inventory",
        "datetime",
        "api.schemas_v2.inventory.BatchCreate",
        "logging",
        "datetime.date",
        "typing",
        "uuid.UUID",
        "api.database.get_db",
        "api.schemas_v2.inventory.StockAdjustment",
        "api.services.inventory_service",
        "api.database",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.schemas_v2.inventory.BatchUpdate",
        "api.schemas_v2.inventory.StockMovementResponse",
        "api.schemas_v2.inventory.BatchResponse",
        "fastapi.APIRouter",
        "typing.Optional",
        "api.schemas_v2.inventory.StockTransfer",
        "api.schemas_v2.inventory.ExpiryAlert",
        "fastapi",
        "api.schemas_v2.inventory.StockMovementCreate",
        "api.schemas_v2.inventory.StockValuation",
        "sqlalchemy.orm.Session",
        "api.services.inventory_service.InventoryService",
        "fastapi.Query",
        "api.schemas_v2.inventory.InventoryDashboard",
        "sqlalchemy.text",
        "api.schemas_v2.inventory.CurrentStock",
        "uuid"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "fastapi",
        "datetime",
        "sqlalchemy.orm",
        "uuid",
        "typing",
        "api.schemas_v2.inventory.BatchUpdate",
        "uuid.UUID",
        "api.schemas_v2.inventory.StockTransfer",
        "api.services.inventory_service",
        "api.database"
      ]
    },
    "api/migrations/add_drug_schedule_and_cart.py": {
      "imports": [
        "sqlalchemy",
        "sqlalchemy.Boolean",
        "sys",
        "sqlalchemy.ForeignKey",
        "database",
        "datetime",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.String",
        "os",
        "sqlalchemy.DateTime",
        "database.engine",
        "datetime.datetime",
        "sqlalchemy.create_engine",
        "sqlalchemy.Integer",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.Column",
        "database.SQLALCHEMY_DATABASE_URL"
      ],
      "exports": [
        "run_migration"
      ],
      "functions": [
        "run_migration"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.create_engine",
        "sqlalchemy.Integer",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.Column",
        "database.SQLALCHEMY_DATABASE_URL"
      ]
    },
    "api/migrations/add_inventory_tables.py": {
      "imports": [
        "logging",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "typing.Any",
        "sqlalchemy.text"
      ],
      "exports": [
        "create_sample_inventory_data",
        "create_batches_table",
        "create_inventory_movements_table",
        "add_inventory_columns_to_products",
        "add_inventory_enterprise_tables",
        "get_existing_tables"
      ],
      "functions": [
        "create_sample_inventory_data",
        "create_batches_table",
        "create_inventory_movements_table",
        "add_inventory_columns_to_products",
        "add_inventory_enterprise_tables",
        "get_existing_tables"
      ],
      "classes": [],
      "database_tables": [
        "batches",
        "products",
        "inventory_movements",
        "information_schema"
      ],
      "unused_imports": [
        "typing"
      ]
    },
    "api/migrations/add_order_columns.py": {
      "imports": [
        "logging",
        "sqlalchemy",
        "typing.List",
        "typing.Dict",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "sqlalchemy.text"
      ],
      "exports": [
        "create_sample_order_data",
        "add_order_enterprise_columns"
      ],
      "functions": [
        "create_sample_order_data",
        "add_order_enterprise_columns"
      ],
      "classes": [],
      "database_tables": [
        "customers",
        "orders",
        "order_items",
        "products",
        "information_schema"
      ],
      "unused_imports": [
        "typing.List",
        "typing"
      ]
    },
    "api/migrations/add_customer_columns.py": {
      "imports": [
        "logging",
        "sqlalchemy",
        "typing.List",
        "typing.Dict",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "typing",
        "sqlalchemy.text"
      ],
      "exports": [
        "create_sample_customer_data",
        "get_existing_columns",
        "add_customer_enterprise_columns"
      ],
      "functions": [
        "create_sample_customer_data",
        "get_existing_columns",
        "add_customer_enterprise_columns"
      ],
      "classes": [],
      "database_tables": [
        "customers",
        "ON",
        "information_schema"
      ],
      "unused_imports": [
        "typing"
      ]
    },
    "api/migrations/add_product_details.py": {
      "imports": [
        "sqlalchemy",
        "sys",
        "database",
        "datetime",
        "os",
        "database.engine",
        "datetime.datetime",
        "sqlalchemy.create_engine",
        "database.SQLALCHEMY_DATABASE_URL"
      ],
      "exports": [
        "run_migration"
      ],
      "functions": [
        "run_migration"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "sqlalchemy",
        "database.SQLALCHEMY_DATABASE_URL",
        "sqlalchemy.create_engine"
      ]
    },
    "api/migrations/create_billing_tables.py": {
      "imports": [
        "logging",
        "sqlalchemy",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "sqlalchemy.text"
      ],
      "exports": [
        "drop_billing_tables",
        "create_billing_tables"
      ],
      "functions": [
        "drop_billing_tables",
        "create_billing_tables"
      ],
      "classes": [],
      "database_tables": [
        "ON",
        "information_schema"
      ],
      "unused_imports": []
    },
    "api/migrations/migrate_to_numeric_ids.py": {
      "imports": [
        "sys",
        "database",
        "datetime",
        "os",
        "database.engine",
        "datetime.datetime"
      ],
      "exports": [
        "run_migration"
      ],
      "functions": [
        "run_migration"
      ],
      "classes": [],
      "database_tables": [],
      "unused_imports": []
    },
    "api/migrations/fix_order_columns.py": {
      "imports": [
        "logging",
        "sqlalchemy",
        "sqlalchemy.orm",
        "sqlalchemy.orm.Session",
        "sqlalchemy.text"
      ],
      "exports": [
        "fix_missing_columns"
      ],
      "functions": [
        "fix_missing_columns"
      ],
      "classes": [],
      "database_tables": [
        "orders"
      ],
      "unused_imports": [
        "sqlalchemy.orm"
      ]
    },
    "api/core/config.py": {
      "imports": [
        "dotenv",
        "pydantic",
        "pydantic_settings",
        "dotenv.load_dotenv",
        "os",
        "typing",
        "pydantic_settings.BaseSettings",
        "supabase.create_client",
        "pydantic.BaseSettings",
        "supabase",
        "typing.Optional",
        "supabase.Client"
      ],
      "exports": [
        "get_supabase_client",
        "Config",
        "get_database_info",
        "database_url",
        "parse_env_var",
        "is_supabase",
        "Settings"
      ],
      "functions": [
        "get_supabase_client",
        "get_database_info",
        "database_url",
        "parse_env_var",
        "is_supabase"
      ],
      "classes": [
        "Config",
        "Settings"
      ],
      "database_tables": [],
      "unused_imports": [
        "supabase.Client",
        "pydantic_settings",
        "typing"
      ]
    },
    "api/core/audit.py": {
      "imports": [
        "logging",
        "typing.Dict",
        "datetime",
        "sqlalchemy.orm",
        "fastapi.Request",
        "sqlalchemy.orm.Session",
        "typing",
        "json",
        "typing.Any",
        "datetime.datetime",
        "typing.Optional",
        "fastapi"
      ],
      "exports": [
        "log_authentication",
        "log_api_access",
        "AuditLogger",
        "log_security_event",
        "log_data_change",
        "log_system_event"
      ],
      "functions": [
        "log_authentication",
        "log_api_access",
        "log_security_event",
        "log_data_change",
        "log_system_event"
      ],
      "classes": [
        "AuditLogger"
      ],
      "database_tables": [],
      "unused_imports": [
        "fastapi",
        "sqlalchemy.orm.Session",
        "typing",
        "typing.Any"
      ]
    },
    "api/core/crud_base.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "typing.TypeVar",
        "pydantic.BaseModel",
        "fastapi.encoders",
        "fastapi.encoders.jsonable_encoder",
        "os",
        "typing",
        "typing.Union",
        "api.database",
        "typing.Dict",
        "typing.Generic",
        "typing.Type",
        "sqlalchemy.orm",
        "api.database.Base",
        "database.Base",
        "typing.Optional",
        "sys",
        "database",
        "sqlalchemy.orm.Session",
        "typing.Any"
      ],
      "exports": [
        "remove",
        "count",
        "__init__",
        "get",
        "create_crud",
        "create",
        "get_by_field",
        "CRUDBase",
        "exists",
        "get_active",
        "get_multi",
        "update"
      ],
      "functions": [
        "remove",
        "count",
        "__init__",
        "get",
        "create_crud",
        "create",
        "get_by_field",
        "exists",
        "get_active",
        "get_multi",
        "update"
      ],
      "classes": [
        "CRUDBase"
      ],
      "database_tables": [],
      "unused_imports": [
        "sqlalchemy.orm",
        "pydantic",
        "typing",
        "fastapi.encoders"
      ]
    },
    "api/core/database_manager.py": {
      "imports": [
        "sqlalchemy.exc",
        "api.core.config.settings",
        "contextlib",
        "sqlalchemy.exc.SQLAlchemyError",
        "logging",
        "time",
        "typing",
        "sqlalchemy.create_engine",
        "contextlib.asynccontextmanager",
        "asyncio",
        "sqlalchemy",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "api.core.config",
        "threading",
        "typing.Optional",
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy.text",
        "fastapi"
      ],
      "exports": [
        "DatabaseCircuitBreaker",
        "record_success",
        "initialize",
        "__init__",
        "DatabaseManager",
        "can_execute",
        "_create_engine",
        "get_db",
        "record_failure",
        "get_health_status",
        "get_database_manager",
        "test_connection",
        "get_session"
      ],
      "functions": [
        "record_success",
        "initialize",
        "__init__",
        "can_execute",
        "_create_engine",
        "get_db",
        "record_failure",
        "get_health_status",
        "get_database_manager",
        "test_connection",
        "get_session"
      ],
      "classes": [
        "DatabaseCircuitBreaker",
        "DatabaseManager"
      ],
      "database_tables": [],
      "unused_imports": [
        "asyncio",
        "api.core.config",
        "typing",
        "contextlib",
        "fastapi"
      ]
    },
    "api/core/validators.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "datetime",
        "email_validator.EmailNotValidError",
        "bleach",
        "typing",
        "typing.Any",
        "email_validator",
        "datetime.datetime",
        "re",
        "typing.Optional",
        "pydantic.validator",
        "pydantic.EmailStr",
        "email_validator.validate_email"
      ],
      "exports": [
        "SecurityValidator",
        "validate_percentage",
        "validate_email_format",
        "validate_gst_number",
        "PharmaceuticalValidator",
        "validate_gst_number_field",
        "validate_and_sanitize_text",
        "validate_quantity",
        "BusinessValidator",
        "validate_hsn_code",
        "validate_batch_number",
        "sanitize_html",
        "validate_phone_number",
        "sanitize_sql_input",
        "validate_expiry_date",
        "validate_positive_amount",
        "validate_drug_schedule",
        "validate_positive_price",
        "validate_no_script_tags",
        "validate_phone_field",
        "validate_drug_schedule_field"
      ],
      "functions": [
        "validate_positive_amount",
        "validate_quantity",
        "validate_hsn_code",
        "validate_batch_number",
        "validate_percentage",
        "sanitize_html",
        "validate_email_format",
        "validate_drug_schedule",
        "sanitize_sql_input",
        "validate_gst_number",
        "validate_positive_price",
        "validate_gst_number_field",
        "validate_phone_number",
        "validate_no_script_tags",
        "validate_expiry_date",
        "validate_phone_field",
        "validate_and_sanitize_text",
        "validate_drug_schedule_field"
      ],
      "classes": [
        "SecurityValidator",
        "PharmaceuticalValidator",
        "BusinessValidator"
      ],
      "database_tables": [],
      "unused_imports": [
        "typing.List",
        "pydantic",
        "typing",
        "email_validator",
        "typing.Any",
        "typing.Optional",
        "pydantic.EmailStr"
      ]
    },
    "api/core/security.py": {
      "imports": [
        "logging",
        "fastapi",
        "api.core.config.settings",
        "datetime",
        "functools.wraps",
        "fastapi.HTTPException",
        "api.core.config",
        "fastapi.Request",
        "typing",
        "datetime.datetime",
        "typing.Optional",
        "fastapi.responses",
        "uuid",
        "fastapi.responses.JSONResponse",
        "functools",
        "fastapi.FastAPI"
      ],
      "exports": [
        "ProductionException",
        "setup_error_handlers",
        "__init__",
        "handle_database_error",
        "PermissionDeniedError",
        "ResourceNotFoundError",
        "InvalidCredentialsError",
        "InsufficientStockError"
      ],
      "functions": [
        "__init__",
        "setup_error_handlers",
        "handle_database_error"
      ],
      "classes": [
        "ProductionException",
        "PermissionDeniedError",
        "ResourceNotFoundError",
        "InvalidCredentialsError",
        "InsufficientStockError"
      ],
      "database_tables": [],
      "unused_imports": [
        "api.core.config",
        "typing",
        "fastapi.responses",
        "typing.Optional",
        "functools"
      ]
    },
    "api/schemas_v2/billing.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "typing.Dict",
        "decimal",
        "datetime",
        "uuid.UUID",
        "enum",
        "enum.Enum",
        "typing",
        "pydantic.BaseModel",
        "typing.Any",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "pydantic.validator",
        "uuid"
      ],
      "exports": [
        "validate_due_date",
        "PaymentMode",
        "InvoiceStatus",
        "GSTR1Summary",
        "Config",
        "GSTReportRequest",
        "GSTR3BSummary",
        "PaymentCreate",
        "PaymentResponse",
        "GSTType",
        "InvoiceItemBase",
        "InvoiceBase",
        "InvoiceSummary",
        "InvoiceCreate",
        "InvoiceResponse",
        "validate_date_range"
      ],
      "functions": [
        "validate_due_date",
        "validate_date_range"
      ],
      "classes": [
        "PaymentMode",
        "InvoiceStatus",
        "GSTR1Summary",
        "Config",
        "GSTReportRequest",
        "GSTR3BSummary",
        "PaymentCreate",
        "PaymentResponse",
        "GSTType",
        "InvoiceItemBase",
        "InvoiceBase",
        "InvoiceSummary",
        "InvoiceCreate",
        "InvoiceResponse"
      ],
      "database_tables": [],
      "unused_imports": [
        "pydantic",
        "enum",
        "typing.Dict",
        "decimal",
        "typing",
        "typing.Any",
        "uuid"
      ]
    },
    "api/schemas_v2/order.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "decimal",
        "datetime",
        "uuid.UUID",
        "typing",
        "pydantic.BaseModel",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "pydantic.validator",
        "uuid"
      ],
      "exports": [
        "Config",
        "OrderItemResponse",
        "OrderResponse",
        "OrderStatusHistory",
        "OrderItemCreate",
        "OrderItemBase",
        "OrderBase",
        "calculate_line_total",
        "OrderListResponse",
        "OrderDashboard",
        "OrderCreate",
        "validate_delivery_date",
        "OrderUpdate",
        "ReturnRequest",
        "InvoiceResponse",
        "DeliveryUpdate",
        "InvoiceRequest"
      ],
      "functions": [
        "calculate_line_total",
        "validate_delivery_date"
      ],
      "classes": [
        "Config",
        "OrderItemResponse",
        "OrderResponse",
        "OrderStatusHistory",
        "OrderItemCreate",
        "OrderItemBase",
        "OrderBase",
        "OrderListResponse",
        "OrderDashboard",
        "OrderCreate",
        "OrderUpdate",
        "ReturnRequest",
        "InvoiceResponse",
        "DeliveryUpdate",
        "InvoiceRequest"
      ],
      "database_tables": [],
      "unused_imports": [
        "uuid",
        "pydantic",
        "typing",
        "decimal"
      ]
    },
    "api/schemas_v2/__init__.py": {
      "imports": [
        "api.base_schemas",
        "api.schemas_v2.customer.OutstandingInvoice",
        "api.schemas_v2.customer",
        "api.schemas_v2.customer.CustomerListResponse",
        "api.schemas_v2.customer.CustomerResponse",
        "api.schemas_v2.customer.CustomerLedgerResponse",
        "api.schemas_v2.customer.CustomerLedgerEntry",
        "api.schemas_v2.customer.CustomerUpdate",
        "api.schemas_v2.customer.PaymentRecord",
        "api.schemas_v2.customer.PaymentResponse",
        "api.schemas_v2.customer.CustomerBase",
        "api.schemas_v2.customer.CustomerCreate",
        "api.schemas_v2.customer.CustomerOutstandingResponse"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.base_schemas",
        "api.schemas_v2.customer"
      ]
    },
    "api/schemas_v2/customer.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "decimal",
        "datetime",
        "uuid.UUID",
        "typing",
        "pydantic.BaseModel",
        "pydantic.Field",
        "datetime.datetime",
        "re",
        "typing.Optional",
        "pydantic.validator",
        "uuid"
      ],
      "exports": [
        "Config",
        "PaymentRecord",
        "PaymentResponse",
        "CustomerLedgerEntry",
        "CustomerUpdate",
        "validate_pan",
        "CustomerLedgerResponse",
        "CustomerBase",
        "CustomerOutstandingResponse",
        "CustomerCreate",
        "CustomerResponse",
        "validate_gstin",
        "CustomerListResponse",
        "OutstandingInvoice"
      ],
      "functions": [
        "validate_pan",
        "validate_gstin"
      ],
      "classes": [
        "Config",
        "PaymentRecord",
        "PaymentResponse",
        "CustomerLedgerEntry",
        "CustomerUpdate",
        "CustomerLedgerResponse",
        "CustomerBase",
        "CustomerOutstandingResponse",
        "CustomerCreate",
        "CustomerResponse",
        "CustomerListResponse",
        "OutstandingInvoice"
      ],
      "database_tables": [],
      "unused_imports": [
        "uuid",
        "pydantic",
        "typing",
        "decimal"
      ]
    },
    "api/schemas_v2/inventory.py": {
      "imports": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "decimal",
        "datetime",
        "uuid.UUID",
        "typing",
        "pydantic.BaseModel",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "pydantic.validator",
        "uuid"
      ],
      "exports": [
        "StockValuation",
        "BatchUpdate",
        "StockAdjustment",
        "Config",
        "BatchCreate",
        "StockTransfer",
        "ExpiryAlert",
        "BatchResponse",
        "StockMovementBase",
        "StockMovementResponse",
        "BatchBase",
        "InventoryDashboard",
        "StockMovementCreate",
        "CurrentStock",
        "validate_expiry"
      ],
      "functions": [
        "validate_expiry"
      ],
      "classes": [
        "StockValuation",
        "BatchUpdate",
        "StockAdjustment",
        "Config",
        "BatchCreate",
        "StockTransfer",
        "ExpiryAlert",
        "BatchResponse",
        "StockMovementBase",
        "StockMovementResponse",
        "BatchBase",
        "InventoryDashboard",
        "StockMovementCreate",
        "CurrentStock"
      ],
      "database_tables": [],
      "unused_imports": [
        "uuid",
        "pydantic",
        "typing",
        "decimal"
      ]
    },
    "api/services/inventory_service.py": {
      "imports": [
        "typing.List",
        "api.schemas_v2.inventory",
        "decimal",
        "datetime",
        "api.schemas_v2.inventory.BatchCreate",
        "datetime.timedelta",
        "sqlalchemy.func",
        "logging",
        "datetime.date",
        "typing",
        "datetime.datetime",
        "uuid.UUID",
        "api.schemas_v2.inventory.StockAdjustment",
        "sqlalchemy",
        "decimal.Decimal",
        "typing.Dict",
        "sqlalchemy.orm",
        "api.schemas_v2.inventory.BatchUpdate",
        "api.schemas_v2.inventory.StockMovementResponse",
        "api.schemas_v2.inventory.BatchResponse",
        "sqlalchemy.or_",
        "typing.Optional",
        "api.schemas_v2.inventory.StockTransfer",
        "api.schemas_v2.inventory.ExpiryAlert",
        "sqlalchemy.and_",
        "api.schemas_v2.inventory.StockMovementCreate",
        "api.schemas_v2.inventory.StockValuation",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "api.schemas_v2.inventory.InventoryDashboard",
        "sqlalchemy.text",
        "api.schemas_v2.inventory.CurrentStock",
        "uuid"
      ],
      "exports": [
        "get_batch",
        "get_inventory_dashboard",
        "create_batch",
        "calculate_days_to_expiry",
        "get_stock_valuation",
        "record_stock_movement",
        "process_stock_adjustment",
        "get_expiry_alerts",
        "InventoryService",
        "get_current_stock",
        "get_expiry_alert_level"
      ],
      "functions": [
        "get_batch",
        "get_inventory_dashboard",
        "create_batch",
        "calculate_days_to_expiry",
        "get_stock_valuation",
        "record_stock_movement",
        "process_stock_adjustment",
        "get_expiry_alerts",
        "get_current_stock",
        "get_expiry_alert_level"
      ],
      "classes": [
        "InventoryService"
      ],
      "database_tables": [
        "batches",
        "products",
        "orders",
        "inventory_movements"
      ],
      "unused_imports": [
        "typing.Dict",
        "decimal",
        "typing",
        "typing.Any",
        "api.schemas_v2.inventory.BatchUpdate",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "uuid",
        "api.schemas_v2.inventory.StockTransfer",
        "sqlalchemy.and_"
      ]
    },
    "api/services/order_service.py": {
      "imports": [
        "typing.List",
        "api.schemas_v2.order.InvoiceResponse",
        "decimal",
        "datetime",
        "api.schemas_v2.order.InvoiceRequest",
        "api.services.customer_service.CustomerService",
        "datetime.timedelta",
        "sqlalchemy.func",
        "logging",
        "datetime.date",
        "api.schemas_v2.order",
        "api.schemas_v2.order.OrderItemResponse",
        "typing",
        "api.schemas_v2.order.OrderResponse",
        "datetime.datetime",
        "uuid.UUID",
        "api.schemas_v2.order.OrderUpdate",
        "sqlalchemy",
        "decimal.Decimal",
        "typing.Dict",
        "sqlalchemy.orm",
        "api.schemas_v2.order.DeliveryUpdate",
        "sqlalchemy.or_",
        "typing.Optional",
        "api.services.customer_service",
        "api.schemas_v2.order.ReturnRequest",
        "sqlalchemy.and_",
        "sqlalchemy.orm.Session",
        "api.schemas_v2.order.OrderCreate",
        "typing.Any",
        "sqlalchemy.text",
        "uuid"
      ],
      "exports": [
        "get_order_dashboard",
        "allocate_inventory",
        "validate_inventory",
        "generate_order_number",
        "generate_invoice_number",
        "OrderService",
        "calculate_order_totals",
        "process_return"
      ],
      "functions": [
        "get_order_dashboard",
        "allocate_inventory",
        "validate_inventory",
        "generate_order_number",
        "generate_invoice_number",
        "calculate_order_totals",
        "process_return"
      ],
      "classes": [
        "OrderService"
      ],
      "database_tables": [
        "orders",
        "order_items",
        "invoices",
        "batches",
        "products",
        "sales_returns",
        "inventory_movements"
      ],
      "unused_imports": [
        "api.schemas_v2.order.InvoiceResponse",
        "decimal",
        "api.schemas_v2.order.OrderItemResponse",
        "api.schemas_v2.order.OrderCreate",
        "typing",
        "api.schemas_v2.order.OrderResponse",
        "api.schemas_v2.order.InvoiceRequest",
        "api.services.customer_service.CustomerService",
        "api.schemas_v2.order.DeliveryUpdate",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "typing.Optional",
        "uuid",
        "api.schemas_v2.order.OrderUpdate",
        "api.services.customer_service",
        "sqlalchemy.and_"
      ]
    },
    "api/services/__init__.py": {
      "imports": [
        "api.services.customer_service.CustomerService",
        "api.services.customer_service"
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "database_tables": [],
      "unused_imports": [
        "api.services.customer_service"
      ]
    },
    "api/services/customer_service.py": {
      "imports": [
        "typing.List",
        "api.schemas_v2.customer.OutstandingInvoice",
        "decimal",
        "datetime",
        "api.schemas_v2.customer.CustomerResponse",
        "api.schemas_v2.customer.CustomerLedgerEntry",
        "api.schemas_v2.customer.CustomerLedgerResponse",
        "api.schemas_v2.customer.PaymentRecord",
        "api.schemas_v2.customer.PaymentResponse",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.schemas_v2.customer.CustomerCreate",
        "logging",
        "datetime.date",
        "api.models.Customer",
        "typing",
        "api.models",
        "datetime.datetime",
        "api.models.Payment",
        "uuid.UUID",
        "api.schemas_v2.customer.CustomerOutstandingResponse",
        "sqlalchemy",
        "api.schemas_v2.customer",
        "decimal.Decimal",
        "typing.Dict",
        "sqlalchemy.orm",
        "api.schemas_v2.customer.CustomerUpdate",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "api.models.Order",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "sqlalchemy.text",
        "uuid"
      ],
      "exports": [
        "get_outstanding_invoices",
        "get_customer_statistics",
        "validate_credit_limit",
        "record_payment",
        "get_customer_ledger",
        "CustomerService",
        "generate_customer_code"
      ],
      "functions": [
        "get_outstanding_invoices",
        "validate_credit_limit",
        "get_customer_statistics",
        "record_payment",
        "get_customer_ledger",
        "generate_customer_code"
      ],
      "classes": [
        "CustomerService"
      ],
      "database_tables": [
        "customers",
        "payments",
        "orders"
      ],
      "unused_imports": [
        "typing.List",
        "api.models.Order",
        "decimal",
        "api.schemas_v2.customer.CustomerResponse",
        "sqlalchemy.orm",
        "api.schemas_v2.customer.CustomerUpdate",
        "uuid",
        "typing",
        "api.models",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "api.schemas_v2.customer.CustomerCreate",
        "uuid.UUID",
        "sqlalchemy.and_"
      ]
    },
    "api/services/billing_service.py": {
      "imports": [
        "typing.List",
        "decimal",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "api.schemas_v2.billing.InvoiceCreate",
        "logging",
        "datetime.date",
        "api.schemas_v2.billing.PaymentResponse",
        "typing",
        "datetime.datetime",
        "api.schemas_v2.billing.InvoiceStatus",
        "uuid.UUID",
        "api.schemas_v2.billing.PaymentCreate",
        "api.schemas_v2.billing.PaymentMode",
        "sqlalchemy",
        "decimal.Decimal",
        "typing.Dict",
        "sqlalchemy.orm",
        "api.schemas_v2.billing",
        "api.schemas_v2.billing.GSTR3BSummary",
        "api.schemas_v2.billing.InvoiceItemBase",
        "sqlalchemy.or_",
        "typing.Optional",
        "api.schemas_v2.billing.InvoiceSummary",
        "api.schemas_v2.billing.GSTType",
        "sqlalchemy.and_",
        "decimal.ROUND_HALF_UP",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "sqlalchemy.text",
        "uuid",
        "api.schemas_v2.billing.InvoiceResponse",
        "api.schemas_v2.billing.GSTR1Summary"
      ],
      "exports": [
        "get_gstr1_summary",
        "record_payment",
        "generate_invoice_number",
        "BillingService",
        "calculate_gst_amounts",
        "get_invoice",
        "get_invoice_summary",
        "create_invoice_from_order"
      ],
      "functions": [
        "get_gstr1_summary",
        "record_payment",
        "generate_invoice_number",
        "calculate_gst_amounts",
        "get_invoice",
        "get_invoice_summary",
        "create_invoice_from_order"
      ],
      "classes": [
        "BillingService"
      ],
      "database_tables": [
        "invoice_date",
        "customers",
        "organizations",
        "orders",
        "order_items",
        "invoices",
        "batches",
        "invoice_items",
        "products",
        "invoice_payments",
        "CURRENT_DATE"
      ],
      "unused_imports": [
        "typing.List",
        "decimal",
        "sqlalchemy.orm",
        "api.schemas_v2.billing.GSTR3BSummary",
        "typing",
        "typing.Any",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "typing.Optional",
        "uuid",
        "api.schemas_v2.billing.PaymentMode",
        "sqlalchemy.and_"
      ]
    }
  },
  "component_mapping": {
    "base_schemas.py": {
      "files": [
        "api/base_schemas.py"
      ],
      "total_functions": 0,
      "total_classes": 25,
      "dependencies": [
        "typing.List",
        "pydantic",
        "decimal.Decimal",
        "decimal",
        "datetime",
        "pydantic.BaseModel",
        "typing",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "uuid"
      ]
    },
    "models.py": {
      "files": [
        "api/models.py"
      ],
      "total_functions": 0,
      "total_classes": 11,
      "dependencies": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy",
        "sqlalchemy.Boolean",
        "datetime",
        "sqlalchemy.Text",
        "sqlalchemy.DateTime",
        "sqlalchemy.dialects.postgresql.UUID",
        "datetime.datetime",
        "sqlalchemy.JSON",
        "sqlalchemy.Integer",
        "sqlalchemy.Numeric",
        "sqlalchemy.Column",
        "sqlalchemy.ARRAY"
      ]
    },
    "database.py": {
      "files": [
        "api/database.py"
      ],
      "total_functions": 3,
      "total_classes": 0,
      "dependencies": [
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy",
        "core.config",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm",
        "core.config.settings",
        "models",
        "sqlalchemy.create_engine",
        "sqlalchemy.ext.declarative.declarative_base"
      ]
    },
    "schemas.py": {
      "files": [
        "api/schemas.py"
      ],
      "total_functions": 0,
      "total_classes": 47,
      "dependencies": [
        "typing.List",
        "pydantic",
        "datetime.date",
        "decimal.Decimal",
        "typing.Dict",
        "decimal",
        "datetime",
        "enum",
        "enum.Enum",
        "uuid",
        "typing",
        "pydantic.BaseModel",
        "typing.Any",
        "pydantic.Field",
        "datetime.datetime",
        "typing.Optional",
        "pydantic.validator",
        "uuid.UUID"
      ]
    },
    "business_logic.py": {
      "files": [
        "api/business_logic.py"
      ],
      "total_functions": 22,
      "total_classes": 6,
      "dependencies": [
        "typing.List",
        "schemas",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "datetime.date",
        "database.get_db",
        "typing",
        "datetime.datetime",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.orm",
        "models",
        "typing.Optional",
        "sqlalchemy.and_",
        "database",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "json",
        "uuid"
      ]
    },
    "initialize_db.py": {
      "files": [
        "api/initialize_db.py"
      ],
      "total_functions": 1,
      "total_classes": 0,
      "dependencies": [
        "sys",
        "database",
        "models.Base",
        "os",
        "database.engine",
        "models"
      ]
    },
    "main.py": {
      "files": [
        "api/main.py"
      ],
      "total_functions": 0,
      "total_classes": 0,
      "dependencies": [
        "typing.List",
        "fastapi.exceptions",
        "sqlalchemy.exc",
        "fastapi.Depends",
        "fastapi.Form",
        "datetime",
        "fastapi.middleware.cors.CORSMiddleware",
        "contextlib",
        "uvicorn",
        "sqlalchemy.exc.SQLAlchemyError",
        "logging",
        "collections.defaultdict",
        "time",
        "datetime.date",
        "fastapi.middleware.trustedhost.TrustedHostMiddleware",
        "collections",
        "fastapi.Request",
        "typing",
        "fastapi.middleware.trustedhost",
        "datetime.datetime",
        "fastapi.exceptions.RequestValidationError",
        "fastapi.responses",
        "contextlib.asynccontextmanager",
        "fastapi.status",
        "sqlalchemy",
        "fastapi.middleware.cors",
        "fastapi.HTTPException",
        "core.audit",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "core.audit.AuditLogger",
        "fastapi.responses.JSONResponse",
        "sqlalchemy.and_",
        "sqlalchemy.orm.Session",
        "json",
        "sqlalchemy.text",
        "fastapi",
        "fastapi.FastAPI",
        "fastapi.security"
      ]
    },
    "crud.py": {
      "files": [
        "api/crud.py"
      ],
      "total_functions": 196,
      "total_classes": 0,
      "dependencies": [
        "typing.List",
        "schemas",
        "datetime",
        "core.crud_base",
        "datetime.timedelta",
        "sqlalchemy.func",
        "datetime.date",
        "os",
        "typing",
        "datetime.datetime",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.orm",
        "models",
        "sqlalchemy.and_",
        "sys",
        "sqlalchemy.orm.Session",
        "json",
        "core.crud_base.create_crud",
        "uuid"
      ]
    },
    "dependencies.py": {
      "files": [
        "api/dependencies.py"
      ],
      "total_functions": 1,
      "total_classes": 0,
      "dependencies": [
        "jose.jwt",
        "fastapi.Depends",
        "datetime",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "fastapi.security.HTTPAuthorizationCredentials",
        "sqlalchemy.orm.Session",
        "typing",
        "datetime.datetime",
        "jose.JWTError",
        "typing.Optional",
        "fastapi",
        "fastapi.status",
        "jose",
        "fastapi.security"
      ]
    },
    "routers": {
      "files": [
        "api/routers/stock_adjustments.py",
        "api/routers/simple_delivery.py",
        "api/routers/sales_returns.py",
        "api/routers/payments.py",
        "api/routers/customers_simple.py",
        "api/routers/billing.py",
        "api/routers/compliance.py",
        "api/routers/tax_entries.py",
        "api/routers/users.py",
        "api/routers/migrations_v2.py",
        "api/routers/purchases.py",
        "api/routers/challans.py",
        "api/routers/db_inspect.py",
        "api/routers/products.py",
        "api/routers/orders.py",
        "api/routers/organizations.py",
        "api/routers/migrations.py",
        "api/routers/analytics.py",
        "api/routers/file_uploads.py",
        "api/routers/batches.py",
        "api/routers/customers.py",
        "api/routers/loyalty.py",
        "api/routers/inventory.py",
        "api/routers/v1/billing.py",
        "api/routers/v1/__init__.py",
        "api/routers/v1/orders.py",
        "api/routers/v1/customers.py",
        "api/routers/v1/inventory.py"
      ],
      "total_functions": 243,
      "total_classes": 3,
      "dependencies": [
        "typing.List",
        "pydantic",
        "bill_parser.pharma_patterns.get_pattern_count",
        "fastapi.Depends",
        "decimal",
        "datetime",
        "hashlib",
        "uuid",
        "pydantic.BaseModel",
        "passlib.context.CryptContext",
        "datetime.timedelta",
        "sqlalchemy.func",
        "bill_parser.parsers.generic",
        "tempfile",
        "logging",
        "datetime.date",
        "collections.defaultdict",
        "passlib.context",
        "collections",
        "os",
        "typing",
        "datetime.datetime",
        "fastapi.responses",
        "sqlalchemy.create_engine",
        "uuid.UUID",
        "fastapi.status",
        "bill_parser.parsers.generic.GenericParser",
        "fastapi.responses.FileResponse",
        "sqlalchemy",
        "decimal.Decimal",
        "typing.Dict",
        "fastapi.HTTPException",
        "sqlalchemy.orm",
        "fastapi.security.HTTPBearer",
        "fastapi.security.HTTPAuthorizationCredentials",
        "fastapi.APIRouter",
        "sqlalchemy.or_",
        "typing.Optional",
        "bill_parser.models.Invoice",
        "jose",
        "sqlalchemy.and_",
        "bill_parser.pharma_patterns",
        "sys",
        "jose.jwt",
        "pathlib.Path",
        "fastapi.UploadFile",
        "bill_parser.models",
        "pathlib",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "json",
        "fastapi.Query",
        "sqlalchemy.text",
        "fastapi.File",
        "mimetypes",
        "fastapi",
        "fastapi.security"
      ]
    },
    "migrations": {
      "files": [
        "api/migrations/add_drug_schedule_and_cart.py",
        "api/migrations/add_inventory_tables.py",
        "api/migrations/add_order_columns.py",
        "api/migrations/add_customer_columns.py",
        "api/migrations/add_product_details.py",
        "api/migrations/create_billing_tables.py",
        "api/migrations/migrate_to_numeric_ids.py",
        "api/migrations/fix_order_columns.py"
      ],
      "total_functions": 17,
      "total_classes": 0,
      "dependencies": [
        "typing.List",
        "datetime",
        "sqlalchemy.Column",
        "logging",
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "os",
        "typing",
        "datetime.datetime",
        "sqlalchemy.create_engine",
        "sqlalchemy",
        "typing.Dict",
        "sqlalchemy.String",
        "sqlalchemy.orm",
        "sqlalchemy.DateTime",
        "database.engine",
        "sqlalchemy.Integer",
        "sqlalchemy.ext.declarative.declarative_base",
        "database.SQLALCHEMY_DATABASE_URL",
        "sys",
        "database",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "sqlalchemy.text"
      ]
    },
    "core": {
      "files": [
        "api/core/config.py",
        "api/core/audit.py",
        "api/core/crud_base.py",
        "api/core/database_manager.py",
        "api/core/validators.py",
        "api/core/security.py"
      ],
      "total_functions": 53,
      "total_classes": 14,
      "dependencies": [
        "typing.List",
        "pydantic",
        "sqlalchemy.exc",
        "datetime",
        "functools.wraps",
        "dotenv.load_dotenv",
        "uuid",
        "pydantic_settings.BaseSettings",
        "typing.TypeVar",
        "supabase.create_client",
        "pydantic.BaseModel",
        "contextlib",
        "fastapi.encoders",
        "sqlalchemy.exc.SQLAlchemyError",
        "logging",
        "fastapi.encoders.jsonable_encoder",
        "time",
        "datetime.date",
        "email_validator.EmailNotValidError",
        "os",
        "fastapi.Request",
        "typing",
        "email_validator",
        "datetime.datetime",
        "re",
        "pydantic.validator",
        "typing.Union",
        "sqlalchemy.create_engine",
        "contextlib.asynccontextmanager",
        "pydantic.EmailStr",
        "fastapi.responses",
        "functools",
        "supabase.Client",
        "asyncio",
        "sqlalchemy",
        "typing.Dict",
        "typing.Generic",
        "typing.Type",
        "sqlalchemy.orm",
        "fastapi.HTTPException",
        "database.Base",
        "pydantic.BaseSettings",
        "supabase",
        "typing.Optional",
        "threading",
        "fastapi.responses.JSONResponse",
        "fastapi.FastAPI",
        "sqlalchemy.orm.sessionmaker",
        "dotenv",
        "sys",
        "pydantic_settings",
        "database",
        "sqlalchemy.orm.Session",
        "bleach",
        "json",
        "typing.Any",
        "sqlalchemy.text",
        "fastapi",
        "email_validator.validate_email"
      ]
    },
    "schemas_v2": {
      "files": [
        "api/schemas_v2/billing.py",
        "api/schemas_v2/order.py",
        "api/schemas_v2/__init__.py",
        "api/schemas_v2/customer.py",
        "api/schemas_v2/inventory.py"
      ],
      "total_functions": 7,
      "total_classes": 55,
      "dependencies": [
        "typing.List",
        "pydantic",
        "enum",
        "enum.Enum",
        "decimal",
        "datetime",
        "pydantic.BaseModel",
        "datetime.date",
        "typing",
        "pydantic.Field",
        "datetime.datetime",
        "re",
        "pydantic.validator",
        "uuid.UUID",
        "decimal.Decimal",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "uuid"
      ]
    },
    "services": {
      "files": [
        "api/services/inventory_service.py",
        "api/services/order_service.py",
        "api/services/__init__.py",
        "api/services/customer_service.py",
        "api/services/billing_service.py"
      ],
      "total_functions": 30,
      "total_classes": 4,
      "dependencies": [
        "typing.List",
        "decimal",
        "datetime",
        "datetime.timedelta",
        "sqlalchemy.func",
        "logging",
        "datetime.date",
        "typing",
        "datetime.datetime",
        "uuid.UUID",
        "sqlalchemy",
        "decimal.Decimal",
        "typing.Dict",
        "sqlalchemy.orm",
        "sqlalchemy.or_",
        "typing.Optional",
        "sqlalchemy.and_",
        "decimal.ROUND_HALF_UP",
        "sqlalchemy.orm.Session",
        "typing.Any",
        "sqlalchemy.text",
        "uuid"
      ]
    }
  },
  "unused_code": {
    "unused_functions": [
      "get_expiring_licenses",
      "can_execute",
      "create_product",
      "delete_sales_return",
      "read_customer",
      "create_price_history",
      "create_challan_from_order",
      "create_loyalty_program",
      "get_customer_documents",
      "get_drug_licensing_report",
      "enroll_customer_in_loyalty",
      "process_expiry_management",
      "deliver_challan",
      "update_advance_payment",
      "delete_purchase",
      "validate_phone_number",
      "update_storage_location",
      "get_daily_challan_report",
      "read_supplier",
      "update_customer_outstanding",
      "create_storage_location",
      "get_audit_log",
      "update_challan",
      "get_wastage_analysis",
      "read_purchase_return_items",
      "read_customer_outstanding",
      "get_cdsco_compliance",
      "create_advance_payment",
      "validate_pan",
      "create_state_compliance",
      "validate_gst_number",
      "delete_order_item",
      "get_dashboard_overview",
      "create_customer_credit_note",
      "validate_gst_number_field",
      "get_sales_trend",
      "get_files",
      "get_regulatory_reports",
      "get_sales_return_analytics",
      "login_user",
      "get_by_field",
      "update_customer",
      "exists",
      "get_files_by_entity",
      "read_challan_items",
      "read_purchase",
      "get_multi",
      "create_cdsco_compliance",
      "create_journal_entry",
      "get_active_loyalty_programs",
      "get_cart_items",
      "get_upi_payment_by_merchant_id",
      "get_licenses",
      "get_enhanced_regulatory_licenses",
      "get_delivery_performance",
      "update_purchase_return",
      "validate_percentage",
      "read_challan",
      "get_price_history",
      "get_order_items",
      "_create_engine",
      "read_order",
      "apply_advance_payment_to_order",
      "create_payment_with_allocation",
      "download_file",
      "read_storage_location",
      "update_medical_representative",
      "get_product_batches",
      "update_vendor_payment",
      "update_inspection_record",
      "read_vendor_payment",
      "update_payment",
      "create_discount_scheme",
      "read_sales_return",
      "redeem_points",
      "process_return",
      "get_purchase_return_item",
      "get_customer_engagement_analytics",
      "update_purchase_item",
      "read_tax_entries",
      "read_payments",
      "validate_drug_schedule",
      "get_purchase_analytics",
      "get_purchase_items",
      "read_batch",
      "update_batch_location",
      "initialize",
      "create_inventory_movement",
      "process_stock_adjustment",
      "get_outstanding_invoices",
      "redeem_reward",
      "get_compliance_checks",
      "register_user",
      "process_payment_received",
      "create_cart_item",
      "validate_date_range",
      "validate_hsn_code",
      "delete_cart_item",
      "create_purchase_return",
      "get_payment_allocation",
      "delete_journal_entry",
      "get_license",
      "get_batches",
      "get_payment_allocations",
      "mark_batch_expired",
      "validate_positive_amount",
      "update_cdsco_monthly_report",
      "generate_invoice_number",
      "get_tax_entries",
      "get_regulatory_report",
      "get_entity_files",
      "get_orders",
      "create_complete_order",
      "delete_product",
      "get_parsing_confidence_metrics",
      "earn_points",
      "get_loyalty_accounts",
      "get_payments",
      "process_payment_with_updates",
      "__init__",
      "get_order_payment_status",
      "get_inventory_movements",
      "get_compliance_check",
      "update_cart_item",
      "create_invoice_from_order",
      "log_system_event",
      "create_batch_location",
      "validate_quantity",
      "database_url",
      "log_security_event",
      "get_roles",
      "get_loyalty_account",
      "create_payment_allocation",
      "get_active_sessions",
      "create_order_item",
      "validate_expiry",
      "get_pending_challans",
      "process_sales_return",
      "resolve_compliance_check",
      "get_customer_payment_summary",
      "get_order_tax_summary",
      "delete_challan",
      "create_inventory_transaction",
      "delete_payment",
      "read_inventory_transactions",
      "create_payment",
      "get_stock_adjustment_analytics",
      "create_enhanced_regulatory_license",
      "read_payment_allocations",
      "get_customer_loyalty_account",
      "update_upi_payment_status",
      "delete_inventory_movement",
      "delete_discount_scheme",
      "update_loyalty_account",
      "verify_license_document",
      "get_audit_logs",
      "apply_advance_to_order",
      "get_reward",
      "get_storage_locations",
      "validate_delivery_date",
      "get_db_session",
      "read_batch_location",
      "read_purchases",
      "setup_error_handlers",
      "update_journal_entry",
      "get_tax_report_summary",
      "create_purchase_item",
      "create_challan",
      "get_expiring_batches",
      "get_current_stock",
      "validate_and_sanitize_text",
      "get_customer_upi_payments",
      "create_user",
      "get_stock_valuation",
      "get_customer_ledger",
      "get_batch_recommendations",
      "create_vendor_payment",
      "get_current_user",
      "create_license_document",
      "get_expiry_alert_level",
      "award_loyalty_points",
      "reconcile_upi_payment",
      "verify_file_upload",
      "create_supplier",
      "init_database",
      "create",
      "generate_monthly_compliance_report",
      "delete_purchase_item",
      "get_batch_analytics",
      "get_low_stock_batches",
      "create_challan_item",
      "change_password",
      "get_active",
      "delete_customer",
      "validate_drug_schedule_field",
      "create_purchase_return_item",
      "get_customer_pending_deliveries",
      "create_order",
      "upload_file",
      "export_audit_report",
      "get_adjustments_by_reason",
      "redeem_loyalty_points",
      "update_user",
      "create_regulatory_license",
      "get_purchase_return_items",
      "get_sales_returns",
      "get_available_rewards",
      "record_success",
      "get_customer_challans",
      "get_supplier_analytics",
      "get_batch_inventory_status",
      "get_purchases",
      "get_customer_outstanding",
      "count",
      "create_role",
      "create_batch",
      "_create_order_journal_entries",
      "get_user_analytics",
      "get_expiry_alerts",
      "get_invoice",
      "read_payment",
      "delete_user",
      "update_license_compliance_score",
      "get_rewards",
      "record_failure",
      "_update_customer_outstanding",
      "get_parser_health",
      "handle_database_error",
      "create_audit_log",
      "get_top_selling_products",
      "get_points_transactions",
      "validate_gstin",
      "logout_user",
      "get_batch_current_stock",
      "generate_order_number",
      "get_pending_document_verifications",
      "get_cart_by_user",
      "get_expired_batches",
      "get_current_user_profile",
      "get_fifo_batches",
      "read_inventory_movements",
      "read_tax_entry",
      "get_applied_discounts",
      "create_cart",
      "delete_challan_item",
      "is_customer_eligible",
      "update_inventory_movement",
      "apply_eligible_discounts",
      "create_customer",
      "read_purchase_item",
      "get_inventory_dashboard",
      "delete_cart",
      "record_payment",
      "get_challan_items",
      "get_pending_tax_returns",
      "get_supplier_batches",
      "get_file",
      "generate_customer_code",
      "get_price_history_record",
      "update_order_payment_status",
      "log_api_access",
      "read_customers",
      "get_challan_print_data",
      "get_db",
      "read_customer_credit_notes",
      "read_sales_returns",
      "read_batches",
      "get_demand_forecast",
      "search_batches_by_number",
      "is_supabase",
      "read_purchase_returns",
      "calculate_days_to_expiry",
      "log_data_change",
      "get_audit_trail_analytics",
      "get_fifo_batch_allocation",
      "update_tax_entry",
      "get_products",
      "update_purchase",
      "get_customer_active_challans",
      "export_comprehensive_report",
      "get_cash_flow_analysis",
      "calculate_discount",
      "validate_inventory",
      "delete_order",
      "get_file_analytics",
      "delete_tax_entry",
      "read_order_item",
      "get_batch_inventory_transactions",
      "create_reward",
      "get_out_of_stock_batches",
      "delete_supplier",
      "process_order_inventory",
      "validate_no_script_tags",
      "drop_billing_tables",
      "validate_phone_field",
      "calculate_order_totals",
      "get_users",
      "get_order_dashboard",
      "add_challan_tracking",
      "get_product_images",
      "create_customer_outstanding",
      "get_inventory_transactions",
      "process_sales_return_inventory",
      "read_inventory_movement",
      "get_gst_summary",
      "create_stock_adjustment",
      "create_license",
      "sanitize_html",
      "get_order_sales_returns",
      "get_health_status",
      "update_discount_scheme",
      "cancel_challan",
      "update",
      "get_session",
      "update_customer_advance_payment",
      "get_batches_expiring_by_month",
      "apply_advance_payment",
      "get",
      "read_orders",
      "delete_vendor_payment",
      "update_batch_status",
      "get_recent_uploads",
      "get_challans",
      "get_batch_adjustments",
      "update_adr_report",
      "upgrade_customer_tier",
      "process_complete_order",
      "update_cart",
      "adjust_batch_stock",
      "validate_due_date",
      "read_customer_outstanding_record",
      "update_order",
      "get_state_compliance",
      "read_order_items",
      "update_challan_item",
      "create_loyalty_account",
      "create_customer_advance_payment",
      "get_batch_status",
      "update_sales_return",
      "update_customer_credit_note",
      "get_compliance_dashboard",
      "record_stock_movement",
      "sanitize_sql_input",
      "get_inventory_turnover",
      "calculate_gst_amounts",
      "validate_expiry_date",
      "get_challan_tracking",
      "get_journal_entries",
      "create_compliance_check",
      "get_customer_sales_returns",
      "update_regulatory_license",
      "submit_regulatory_report",
      "update_batch",
      "get_customer_advance_payments",
      "read_storage_locations",
      "allocate_inventory",
      "get_customer_pending_challans",
      "read_customer_credit_note",
      "update_license",
      "log_authentication",
      "remove",
      "get_database_info",
      "get_customers",
      "delete_file",
      "get_tier_benefits",
      "get_batch_locations",
      "create_sales_return",
      "get_medical_representatives",
      "create_medical_representative",
      "calculate_line_total",
      "get_expiry_timeline",
      "delete_batch",
      "read_challans",
      "validate_credit_limit",
      "get_customer_statistics",
      "check_permission",
      "parse_env_var",
      "create_regulatory_report",
      "get_challan_analytics",
      "test_connection",
      "get_customer_advance_balance",
      "read_purchase_return",
      "create_tax_entry",
      "get_loyalty_analytics",
      "get_license_documents",
      "get_suppliers",
      "delete_regulatory_license",
      "create_order_with_business_logic",
      "generate_upi_qr_code",
      "read_purchase_items",
      "get_compliance_analytics",
      "get_regulatory_licenses",
      "get_gstr1_summary",
      "get_vendor_payments",
      "validate_batch_number",
      "delete_medical_representative",
      "read_batch_locations",
      "read_suppliers",
      "create_purchase",
      "get_purchase_returns",
      "process_purchase_inventory",
      "validate_email_format",
      "get_expiring_licenses_enhanced",
      "update_order_item",
      "read_vendor_payments",
      "get_customer_redemptions",
      "update_product",
      "calculate_tax",
      "read_purchase_return_item",
      "get_tier_performance_analytics",
      "check_database_connection",
      "get_inventory_alerts",
      "update_current_user",
      "get_discount_schemes",
      "read_stock_adjustment",
      "read_stock_adjustments",
      "dispatch_challan",
      "validate_positive_price",
      "update_supplier",
      "get_compliance_certificates",
      "get_invoice_summary",
      "get_customer_credit_notes"
    ],
    "unused_classes": [
      "BusinessLogicService",
      "ComplianceDashboard",
      "SupplierCreate",
      "ProductResponse",
      "ResourceNotFoundError",
      "StockAdjustmentManager",
      "CustomerOutstandingResponse",
      "InventoryDashboard",
      "SalesReturnCreate",
      "StockLevel",
      "InvoiceResponse",
      "CurrentStock",
      "CustomerListResponse",
      "SalesReturn",
      "StockValuation",
      "Customer",
      "PurchaseCreate",
      "PaymentRecord",
      "User",
      "PaymentCreate",
      "PaymentResponse",
      "PermissionDeniedError",
      "BatchResponse",
      "Supplier",
      "PurchaseItemCreate",
      "InvalidCredentialsError",
      "StockMovementCreate",
      "ReturnRequest",
      "PaymentAllocationCreate",
      "UserCreate",
      "InvoiceRequest",
      "ChallanManager",
      "StockAdjustment",
      "OrderStatusHistory",
      "AuditLogger",
      "TaxEntryCreate",
      "GSTR3BSummary",
      "CustomerUpdate",
      "SalesReport",
      "Order",
      "InvoiceSummary",
      "Batch",
      "InventoryMovement",
      "OrderDelivery",
      "InsufficientStockError",
      "Product",
      "ProductUpdate",
      "OrderConfirmation",
      "Config",
      "DeliveryUpdate",
      "GSTR1Summary",
      "Payment",
      "ProductQuickCreate",
      "BatchCreate",
      "InventoryMovementCreate",
      "GSTReportRequest",
      "OrganizationCreate",
      "BatchUpdate",
      "OrderDashboard",
      "OrderListResponse",
      "StockMovementResponse",
      "OrderService",
      "Purchase",
      "CustomerLedgerResponse",
      "StockTransfer",
      "MessageResponse",
      "OrderCreate",
      "CustomerService",
      "OrderUpdate",
      "CustomerAdvancePaymentCreate",
      "OrganizationResponse",
      "InvoiceCreate",
      "ErrorResponse",
      "ProductCreate",
      "OrderItem"
    ],
    "total_unused": 497
  },
  "circular_dependencies": [],
  "database_usage": {},
  "api_endpoints": {
    "POST /": "api/routers/v1/customers.py",
    "GET /": "api/routers/v1/customers.py",
    "GET /{adjustment_id}": "api/routers/stock_adjustments.py",
    "GET /batch/{batch_id}/adjustments": "api/routers/stock_adjustments.py",
    "GET /analytics/summary": "api/routers/loyalty.py",
    "GET /analytics/by-reason": "api/routers/stock_adjustments.py",
    "POST /batch/{batch_id}/adjust": "api/routers/stock_adjustments.py",
    "POST /order/{order_id}/delivered": "api/routers/simple_delivery.py",
    "POST /challan/{challan_id}/delivered": "api/routers/simple_delivery.py",
    "GET /order/{order_id}/status": "api/routers/simple_delivery.py",
    "GET /pending": "api/routers/simple_delivery.py",
    "PUT /order/{order_id}/status": "api/routers/simple_delivery.py",
    "GET /stats": "api/routers/simple_delivery.py",
    "POST /bulk/mark-delivered": "api/routers/simple_delivery.py",
    "GET /{return_id}": "api/routers/sales_returns.py",
    "PUT /{return_id}": "api/routers/sales_returns.py",
    "DELETE /{return_id}": "api/routers/sales_returns.py",
    "GET /customer/{customer_id}/returns": "api/routers/sales_returns.py",
    "GET /order/{order_id}/returns": "api/routers/sales_returns.py",
    "POST /{return_id}/process": "api/routers/sales_returns.py",
    "GET /{payment_id}": "api/routers/payments.py",
    "PUT /{payment_id}": "api/routers/payments.py",
    "DELETE /{payment_id}": "api/routers/payments.py",
    "POST /with-allocation/": "api/routers/payments.py",
    "GET /allocations/": "api/routers/payments.py",
    "POST /apply-advance/": "api/routers/payments.py",
    "POST /advance/": "api/routers/payments.py",
    "PUT /advance/{advance_payment_id}": "api/routers/payments.py",
    "POST /upi/generate-qr/": "api/routers/payments.py",
    "GET /upi/{merchant_tx_id}": "api/routers/payments.py",
    "PUT /upi/update-status/{merchant_tx_id}": "api/routers/payments.py",
    "GET /upi/customer/{customer_id}/payments": "api/routers/payments.py",
    "PUT /upi/reconcile/{upi_payment_id}": "api/routers/payments.py",
    "GET /upi/qr-image/{merchant_tx_id}": "api/routers/payments.py",
    "POST /vendor/": "api/routers/payments.py",
    "GET /vendor/": "api/routers/payments.py",
    "GET /vendor/{vendor_payment_id}": "api/routers/payments.py",
    "PUT /vendor/{vendor_payment_id}": "api/routers/payments.py",
    "DELETE /vendor/{vendor_payment_id}": "api/routers/payments.py",
    "GET /{customer_id}": "api/routers/v1/customers.py",
    "GET /{customer_id}/orders": "api/routers/customers_simple.py",
    "POST /invoices": "api/routers/v1/billing.py",
    "GET /invoices/{invoice_id}": "api/routers/v1/billing.py",
    "GET /invoices": "api/routers/v1/billing.py",
    "POST /payments": "api/routers/v1/billing.py",
    "GET /payments": "api/routers/v1/billing.py",
    "GET /gst/gstr1": "api/routers/v1/billing.py",
    "GET /summary": "api/routers/v1/billing.py",
    "PUT /invoices/{invoice_id}/cancel": "api/routers/v1/billing.py",
    "GET /invoices/{invoice_id}/print": "api/routers/v1/billing.py",
    "POST /audit-logs/": "api/routers/compliance.py",
    "GET /audit-logs/": "api/routers/compliance.py",
    "GET /audit-logs/{log_id}": "api/routers/compliance.py",
    "POST /licenses/": "api/routers/compliance.py",
    "GET /licenses/": "api/routers/compliance.py",
    "GET /licenses/{license_id}": "api/routers/compliance.py",
    "PUT /licenses/{license_id}": "api/routers/compliance.py",
    "GET /licenses/alerts/expiring": "api/routers/compliance.py",
    "POST /reports/": "api/routers/compliance.py",
    "GET /reports/": "api/routers/compliance.py",
    "GET /reports/{report_id}": "api/routers/compliance.py",
    "PUT /reports/{report_id}/submit": "api/routers/compliance.py",
    "POST /checks/": "api/routers/compliance.py",
    "GET /checks/": "api/routers/compliance.py",
    "GET /checks/{check_id}": "api/routers/compliance.py",
    "PUT /checks/{check_id}/resolve": "api/routers/compliance.py",
    "GET /analytics/audit-trail": "api/routers/compliance.py",
    "GET /reports/generate/monthly": "api/routers/compliance.py",
    "GET /reports/drug-licensing": "api/routers/compliance.py",
    "POST /reports/audit-export": "api/routers/compliance.py",
    "GET /{tax_entry_id}": "api/routers/tax_entries.py",
    "PUT /{tax_entry_id}": "api/routers/tax_entries.py",
    "DELETE /{tax_entry_id}": "api/routers/tax_entries.py",
    "POST /calculate": "api/routers/tax_entries.py",
    "GET /order/{order_id}/tax-summary": "api/routers/tax_entries.py",
    "GET /reports/summary": "api/routers/tax_entries.py",
    "GET /reports/gst-summary": "api/routers/tax_entries.py",
    "GET /compliance/pending-returns": "api/routers/tax_entries.py",
    "POST /register": "api/routers/users.py",
    "POST /login": "api/routers/users.py",
    "POST /logout": "api/routers/users.py",
    "GET /me": "api/routers/users.py",
    "PUT /me": "api/routers/users.py",
    "GET /{user_id}": "api/routers/users.py",
    "PUT /{user_id}": "api/routers/users.py",
    "DELETE /{user_id}": "api/routers/users.py",
    "GET /roles/": "api/routers/users.py",
    "POST /roles/": "api/routers/users.py",
    "GET /sessions/active": "api/routers/users.py",
    "POST /change-password": "api/routers/users.py",
    "GET /check-customer-columns": "api/routers/migrations_v2.py",
    "POST /add-customer-columns": "api/routers/migrations_v2.py",
    "POST /create-sample-customers": "api/routers/migrations_v2.py",
    "POST /add-order-columns": "api/routers/migrations_v2.py",
    "POST /fix-order-columns": "api/routers/migrations_v2.py",
    "POST /create-sample-orders": "api/routers/migrations_v2.py",
    "POST /add-inventory-tables": "api/routers/migrations_v2.py",
    "GET /check-inventory-tables": "api/routers/migrations_v2.py",
    "POST /create-billing-tables": "api/routers/migrations_v2.py",
    "GET /check-billing-tables": "api/routers/migrations_v2.py",
    "GET /migration-plan": "api/routers/migrations_v2.py",
    "GET /{purchase_id}": "api/routers/purchases.py",
    "PUT /{purchase_id}": "api/routers/purchases.py",
    "DELETE /{purchase_id}": "api/routers/purchases.py",
    "POST /items/": "api/routers/orders.py",
    "GET /items/": "api/routers/orders.py",
    "GET /items/{purchase_item_id}": "api/routers/purchases.py",
    "PUT /items/{purchase_item_id}": "api/routers/purchases.py",
    "DELETE /items/{purchase_item_id}": "api/routers/purchases.py",
    "POST /returns/": "api/routers/purchases.py",
    "GET /returns/": "api/routers/purchases.py",
    "GET /returns/{return_id}": "api/routers/purchases.py",
    "PUT /returns/{return_id}": "api/routers/purchases.py",
    "POST /return-items/": "api/routers/purchases.py",
    "GET /return-items/return/{return_id}": "api/routers/purchases.py",
    "GET /return-items/{return_item_id}": "api/routers/purchases.py",
    "POST /suppliers/": "api/routers/purchases.py",
    "GET /suppliers/": "api/routers/purchases.py",
    "GET /suppliers/{supplier_id}": "api/routers/purchases.py",
    "PUT /suppliers/{supplier_id}": "api/routers/purchases.py",
    "DELETE /suppliers/{supplier_id}": "api/routers/purchases.py",
    "GET /suppliers/{supplier_id}/analytics": "api/routers/purchases.py",
    "POST /{purchase_id}/upload-invoice": "api/routers/purchases.py",
    "GET /{purchase_id}/invoices": "api/routers/purchases.py",
    "GET /{purchase_id}/download-invoice/{file_id}": "api/routers/purchases.py",
    "POST /parse-invoice": "api/routers/purchases.py",
    "POST /create-from-invoice": "api/routers/purchases.py",
    "GET /{purchase_id}/parse-confidence": "api/routers/purchases.py",
    "GET /parser/health": "api/routers/purchases.py",
    "GET /{challan_id}": "api/routers/challans.py",
    "PUT /{challan_id}": "api/routers/challans.py",
    "DELETE /{challan_id}": "api/routers/challans.py",
    "POST /{challan_id}/items/": "api/routers/challans.py",
    "GET /{challan_id}/items/": "api/routers/challans.py",
    "PUT /{challan_id}/items/{item_id}": "api/routers/challans.py",
    "DELETE /{challan_id}/items/{item_id}": "api/routers/challans.py",
    "POST /{challan_id}/dispatch": "api/routers/challans.py",
    "POST /{challan_id}/deliver": "api/routers/challans.py",
    "POST /from-order/{order_id}": "api/routers/challans.py",
    "POST /{challan_id}/cancel": "api/routers/challans.py",
    "GET /analytics/delivery-performance": "api/routers/challans.py",
    "GET /customer/{customer_id}": "api/routers/challans.py",
    "GET /customer/{customer_id}/pending": "api/routers/challans.py",
    "GET /{challan_id}/print-data": "api/routers/challans.py",
    "GET /reports/daily": "api/routers/challans.py",
    "GET /tables": "api/routers/db_inspect.py",
    "GET /table/{table_name}/columns": "api/routers/db_inspect.py",
    "GET /full-schema": "api/routers/db_inspect.py",
    "POST /fix-column/{table_name}": "api/routers/db_inspect.py",
    "GET /query": "api/routers/db_inspect.py",
    "GET /{product_id}": "api/routers/products.py",
    "PUT /{product_id}": "api/routers/products.py",
    "DELETE /{product_id}": "api/routers/products.py",
    "GET /{order_id}": "api/routers/v1/orders.py",
    "PUT /{order_id}": "api/routers/orders.py",
    "DELETE /{order_id}": "api/routers/orders.py",
    "GET /items/{order_item_id}": "api/routers/orders.py",
    "PUT /items/{order_item_id}": "api/routers/orders.py",
    "DELETE /items/{order_item_id}": "api/routers/orders.py",
    "POST /complete/": "api/routers/orders.py",
    "GET /{order_id}/payment-status": "api/routers/orders.py",
    "POST /{order_id}/upload-bill": "api/routers/orders.py",
    "GET /{order_id}/bills": "api/routers/orders.py",
    "GET /{order_id}/download-bill/{file_id}": "api/routers/orders.py",
    "POST /{order_id}/generate-bill": "api/routers/orders.py",
    "GET /customer/{customer_id}/bills": "api/routers/orders.py",
    "POST /create-default": "api/routers/organizations.py",
    "GET /list": "api/routers/organizations.py",
    "POST /run-org-id-migration": "api/routers/migrations.py",
    "GET /dashboard/overview": "api/routers/analytics.py",
    "GET /dashboard/sales-trend": "api/routers/analytics.py",
    "GET /sales/summary": "api/routers/analytics.py",
    "GET /sales/top-products": "api/routers/analytics.py",
    "GET /inventory/status": "api/routers/analytics.py",
    "GET /inventory/turnover": "api/routers/analytics.py",
    "GET /customers/segmentation": "api/routers/analytics.py",
    "GET /financial/summary": "api/routers/analytics.py",
    "GET /financial/cash-flow": "api/routers/analytics.py",
    "GET /operations/efficiency": "api/routers/analytics.py",
    "GET /predictions/demand-forecast": "api/routers/analytics.py",
    "GET /export/comprehensive-report": "api/routers/analytics.py",
    "POST /upload": "api/routers/file_uploads.py",
    "POST /upload-multiple": "api/routers/file_uploads.py",
    "GET /{file_id}": "api/routers/file_uploads.py",
    "GET /download/{unique_filename}": "api/routers/file_uploads.py",
    "DELETE /{file_id}": "api/routers/file_uploads.py",
    "GET /analytics/recent": "api/routers/file_uploads.py",
    "GET /entity/{entity_type}/{entity_id}": "api/routers/file_uploads.py",
    "GET /customer/{customer_id}/documents": "api/routers/file_uploads.py",
    "GET /product/{product_id}/images": "api/routers/file_uploads.py",
    "GET /compliance/certificates": "api/routers/file_uploads.py",
    "GET /compliance/licenses": "api/routers/file_uploads.py",
    "POST /compliance/upload-certificate": "api/routers/file_uploads.py",
    "GET /{batch_id}": "api/routers/batches.py",
    "PUT /{batch_id}": "api/routers/batches.py",
    "DELETE /{batch_id}": "api/routers/batches.py",
    "GET /product/{product_id}/batches": "api/routers/batches.py",
    "GET /supplier/{supplier_id}/batches": "api/routers/batches.py",
    "GET /search/batch-number/{batch_number}": "api/routers/batches.py",
    "GET /expiry/expired": "api/routers/batches.py",
    "GET /expiry/expiring-soon": "api/routers/batches.py",
    "GET /expiry/by-month/{year}/{month}": "api/routers/batches.py",
    "GET /analytics/expiry-timeline": "api/routers/batches.py",
    "POST /{batch_id}/mark-expired": "api/routers/batches.py",
    "GET /{batch_id}/current-stock": "api/routers/batches.py",
    "GET /reports/wastage-analysis": "api/routers/batches.py",
    "PUT /{customer_id}": "api/routers/v1/customers.py",
    "DELETE /{customer_id}": "api/routers/customers.py",
    "POST /credit-notes/": "api/routers/customers.py",
    "GET /credit-notes/": "api/routers/customers.py",
    "GET /credit-notes/{credit_note_id}": "api/routers/customers.py",
    "PUT /credit-notes/{credit_note_id}": "api/routers/customers.py",
    "POST /outstanding/": "api/routers/customers.py",
    "GET /outstanding/": "api/routers/customers.py",
    "GET /outstanding/{outstanding_id}": "api/routers/customers.py",
    "PUT /outstanding/{outstanding_id}": "api/routers/customers.py",
    "GET /{customer_id}/advance-balance": "api/routers/customers.py",
    "GET /{customer_id}/advance-payments": "api/routers/customers.py",
    "GET /{customer_id}/active-challans": "api/routers/customers.py",
    "GET /{customer_id}/payment-summary": "api/routers/customers.py",
    "POST /accounts/": "api/routers/loyalty.py",
    "GET /accounts/": "api/routers/loyalty.py",
    "GET /accounts/{account_id}": "api/routers/loyalty.py",
    "GET /accounts/customer/{customer_id}": "api/routers/loyalty.py",
    "PUT /accounts/{account_id}": "api/routers/loyalty.py",
    "POST /points/earn": "api/routers/loyalty.py",
    "POST /points/redeem": "api/routers/loyalty.py",
    "GET /points/transactions/{account_id}": "api/routers/loyalty.py",
    "POST /rewards/": "api/routers/loyalty.py",
    "GET /rewards/": "api/routers/loyalty.py",
    "GET /rewards/{reward_id}": "api/routers/loyalty.py",
    "GET /rewards/customer/{customer_id}": "api/routers/loyalty.py",
    "POST /rewards/redeem": "api/routers/loyalty.py",
    "GET /rewards/redemptions/{customer_id}": "api/routers/loyalty.py",
    "GET /analytics/customer-engagement": "api/routers/loyalty.py",
    "GET /analytics/tier-performance": "api/routers/loyalty.py",
    "POST /tiers/upgrade/{customer_id}": "api/routers/loyalty.py",
    "GET /tiers/benefits/{tier}": "api/routers/loyalty.py",
    "POST /movements/": "api/routers/inventory.py",
    "GET /movements/": "api/routers/inventory.py",
    "GET /movements/{movement_id}": "api/routers/inventory.py",
    "PUT /movements/{movement_id}": "api/routers/inventory.py",
    "DELETE /movements/{movement_id}": "api/routers/inventory.py",
    "POST /transactions/": "api/routers/inventory.py",
    "GET /transactions/": "api/routers/inventory.py",
    "GET /transactions/batch/{batch_id}": "api/routers/inventory.py",
    "POST /batch-locations/": "api/routers/inventory.py",
    "GET /batch-locations/": "api/routers/inventory.py",
    "GET /batch-locations/{batch_location_id}": "api/routers/inventory.py",
    "PUT /batch-locations/{batch_location_id}": "api/routers/inventory.py",
    "POST /storage-locations/": "api/routers/inventory.py",
    "GET /storage-locations/": "api/routers/inventory.py",
    "GET /storage-locations/{location_id}": "api/routers/inventory.py",
    "PUT /storage-locations/{location_id}": "api/routers/inventory.py",
    "GET /batch-status/{batch_id}": "api/routers/inventory.py",
    "GET /low-stock/": "api/routers/inventory.py",
    "GET /out-of-stock/": "api/routers/inventory.py",
    "GET /fifo-allocation/{product_id}": "api/routers/inventory.py",
    "GET /alerts": "api/routers/inventory.py",
    "PUT /{order_id}/confirm": "api/routers/v1/orders.py",
    "POST /{order_id}/invoice": "api/routers/v1/orders.py",
    "PUT /{order_id}/deliver": "api/routers/v1/orders.py",
    "POST /{order_id}/return": "api/routers/v1/orders.py",
    "GET /dashboard/stats": "api/routers/v1/orders.py",
    "GET /{customer_id}/ledger": "api/routers/v1/customers.py",
    "GET /{customer_id}/outstanding": "api/routers/v1/customers.py",
    "POST /{customer_id}/payment": "api/routers/v1/customers.py",
    "POST /{customer_id}/check-credit": "api/routers/v1/customers.py",
    "POST /batches": "api/routers/v1/inventory.py",
    "GET /batches/{batch_id}": "api/routers/v1/inventory.py",
    "GET /batches": "api/routers/v1/inventory.py",
    "GET /stock/current/{product_id}": "api/routers/v1/inventory.py",
    "GET /stock/current": "api/routers/v1/inventory.py",
    "POST /movements": "api/routers/v1/inventory.py",
    "GET /movements": "api/routers/v1/inventory.py",
    "POST /stock/adjustment": "api/routers/v1/inventory.py",
    "GET /expiry/alerts": "api/routers/v1/inventory.py",
    "GET /valuation": "api/routers/v1/inventory.py",
    "GET /dashboard": "api/routers/v1/inventory.py"
  }
}